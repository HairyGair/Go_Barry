// test-all-data-feeds.js
// Comprehensive test for all Go BARRY data feeds
import axios from 'axios';\n\nconst API_BASE = 'https://go-barry.onrender.com';\n\nasync function testAllDataFeeds() {\n  console.log('🧪 Testing ALL Go BARRY Data Feeds...');\n  console.log('=' .repeat(60));\n  \n  const tests = [\n    {\n      name: 'Enhanced Alerts Endpoint',\n      url: `${API_BASE}/api/alerts-enhanced`,\n      expected: ['alerts', 'metadata', 'sources']\n    },\n    {\n      name: 'Intelligence Health',\n      url: `${API_BASE}/api/intelligence/health`,\n      expected: ['health', 'components']\n    },\n    {\n      name: 'Enhanced Data Source',\n      url: `${API_BASE}/api/intelligence/data/enhanced`,\n      expected: ['incidents', 'metadata']\n    },\n    {\n      name: 'ML Performance',\n      url: `${API_BASE}/api/intelligence/ml/performance`,\n      expected: ['performance', 'accuracy']\n    },\n    {\n      name: 'Analytics Insights',\n      url: `${API_BASE}/api/intelligence/analytics/insights`,\n      expected: ['insights']\n    },\n    {\n      name: 'Route Analysis',\n      url: `${API_BASE}/api/intelligence/analytics/hotspots`,\n      expected: ['hotspots']\n    }\n  ];\n  \n  const results = {\n    passed: 0,\n    failed: 0,\n    dataSources: {},\n    intelligence: {}\n  };\n  \n  for (const test of tests) {\n    try {\n      console.log(`\\n🔍 Testing: ${test.name}`);\n      const response = await axios.get(test.url, { timeout: 30000 });\n      \n      if (response.status === 200 && response.data) {\n        const hasExpected = test.expected.every(key => \n          response.data.hasOwnProperty(key)\n        );\n        \n        if (hasExpected) {\n          console.log(`✅ ${test.name}: PASS`);\n          results.passed++;\n          \n          // Collect data source stats\n          if (response.data.metadata?.sourceStats) {\n            results.dataSources = response.data.metadata.sourceStats;\n          }\n          \n          // Collect intelligence stats\n          if (response.data.metadata?.intelligenceData) {\n            results.intelligence = response.data.metadata.intelligenceData;\n          }\n          \n          // Log key metrics\n          if (test.name === 'Enhanced Alerts Endpoint') {\n            const alerts = response.data.alerts || [];\n            const sources = response.data.metadata?.sources || [];\n            console.log(`   📊 ${alerts.length} alerts from ${sources.length} sources`);\n            \n            if (response.data.metadata?.statistics) {\n              const stats = response.data.metadata.statistics;\n              console.log(`   🤖 ML Enhanced: ${stats.enhanced || 0}`);\n              console.log(`   🎯 With Routes: ${stats.alertsWithRoutes || 0}`);\n              console.log(`   📍 With Coordinates: ${stats.alertsWithCoordinates || 0}`);\n            }\n          }\n          \n        } else {\n          console.log(`❌ ${test.name}: Missing expected fields`);\n          results.failed++;\n        }\n      } else {\n        console.log(`❌ ${test.name}: Invalid response`);\n        results.failed++;\n      }\n      \n    } catch (error) {\n      console.log(`❌ ${test.name}: ${error.message}`);\n      results.failed++;\n    }\n  }\n  \n  // Summary Report\n  console.log('\\n' + '=' .repeat(60));\n  console.log('📊 DATA FEEDS TEST SUMMARY');\n  console.log('=' .repeat(60));\n  console.log(`✅ Passed: ${results.passed}`);\n  console.log(`❌ Failed: ${results.failed}`);\n  console.log(`📈 Success Rate: ${Math.round((results.passed / tests.length) * 100)}%`);\n  \n  // Data Source Analysis\n  console.log('\\n📡 DATA SOURCE STATUS:');\n  const sourceOrder = ['tomtom', 'here', 'mapquest', 'national_highways'];\n  sourceOrder.forEach(source => {\n    const status = results.dataSources[source];\n    if (status) {\n      const emoji = status.success ? '✅' : '❌';\n      console.log(`   ${emoji} ${source.toUpperCase()}: ${status.count || 0} alerts`);\n      if (status.error) {\n        console.log(`      Error: ${status.error}`);\n      }\n    } else {\n      console.log(`   ⚠️ ${source.toUpperCase()}: No data`);\n    }\n  });\n  \n  // Intelligence Analysis\n  if (Object.keys(results.intelligence).length > 0) {\n    console.log('\\n🤖 INTELLIGENCE STATUS:');\n    console.log(`   📊 Confidence: ${results.intelligence.confidence || 'Unknown'}`);\n    console.log(`   🔄 Last Update: ${results.intelligence.lastUpdate || 'Unknown'}`);\n    \n    if (results.intelligence.performance) {\n      console.log(`   ⚡ Performance: ${JSON.stringify(results.intelligence.performance)}`);\n    }\n  }\n  \n  // Recommendations\n  console.log('\\n💡 RECOMMENDATIONS:');\n  if (results.failed === 0) {\n    console.log('   🎉 All systems operational! Data feeds working perfectly.');\n  } else if (results.failed <= 2) {\n    console.log('   ⚠️ Minor issues detected. Check failed endpoints.');\n  } else {\n    console.log('   🚨 Major issues detected. Immediate attention required.');\n  }\n  \n  console.log('\\n🚀 Test complete!');\n  \n  return {\n    success: results.failed === 0,\n    passed: results.passed,\n    failed: results.failed,\n    dataSources: results.dataSources,\n    intelligence: results.intelligence\n  };\n}\n\n// Run tests\ntestAllDataFeeds()\n  .then(result => {\n    process.exit(result.success ? 0 : 1);\n  })\n  .catch(error => {\n    console.error('💥 Test suite failed:', error.message);\n    process.exit(1);\n  });