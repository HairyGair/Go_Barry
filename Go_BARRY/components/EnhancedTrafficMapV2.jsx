// Go_BARRY/components/EnhancedTrafficMapV2.jsx\n// FIXED: Simple React Native Web compatible map component\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { View, Text, StyleSheet, Platform } from 'react-native';\n\n// Web-compatible TouchableOpacity\nconst WebTouchableOpacity = ({ children, style, onPress }) => {\n  if (Platform.OS !== 'web') {\n    const { TouchableOpacity } = require('react-native');\n    return <TouchableOpacity style={style} onPress={onPress}>{children}</TouchableOpacity>;\n  }\n  \n  return (\n    <View \n      style={[style, { cursor: 'pointer' }]}\n      onStartShouldSetResponder={() => true}\n      onResponderGrant={onPress}\n    >\n      {children}\n    </View>\n  );\n};\n\nconst EnhancedTrafficMapV2 = ({ alerts = [], currentAlert = null, alertIndex = 0, zoomTarget = null }) => {\n  const [mapError, setMapError] = useState(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [isInitializing, setIsInitializing] = useState(false);\n  const mapContainer = useRef(null);\n  const mapInstance = useRef(null);\n\n  const TOMTOM_API_KEY = process.env.EXPO_PUBLIC_TOMTOM_API_KEY;\n\n  useEffect(() => {\n    if (Platform.OS !== 'web') return;\n\n    const initMap = async () => {\n      setIsInitializing(true);\n      setMapError(null);\n\n      try {\n        // Check API key\n        if (!TOMTOM_API_KEY || TOMTOM_API_KEY === 'your_tomtom_api_key_here') {\n          throw new Error('TomTom API key not configured');\n        }\n\n        // Wait for container\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        // Get DOM element for React Native Web\n        let domContainer = null;\n        if (mapContainer.current) {\n          // Try different ways to get the DOM element\n          if (mapContainer.current.getElement) {\n            domContainer = mapContainer.current.getElement();\n          } else if (mapContainer.current._nativeTag) {\n            domContainer = document.querySelector(`[data-tag=\"${mapContainer.current._nativeTag}\"]`);\n          } else {\n            // Fallback: search for our map container\n            const mapContainers = document.querySelectorAll('[data-testid=\"map-container\"]');\n            domContainer = mapContainers[mapContainers.length - 1];\n          }\n        }\n\n        if (!domContainer) {\n          throw new Error('Could not find DOM container for map');\n        }\n\n        console.log('‚úÖ Found DOM container:', domContainer);\n\n        // Load TomTom SDK if needed\n        if (!window.tt) {\n          console.log('üì¶ Loading TomTom SDK...');\n          \n          // Add CSS\n          if (!document.querySelector('link[href*=\"tomtom\"]')) {\n            const link = document.createElement('link');\n            link.href = 'https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.25.0/maps/maps.css';\n            link.rel = 'stylesheet';\n            document.head.appendChild(link);\n          }\n          \n          // Add JS\n          const script = document.createElement('script');\n          script.src = 'https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.25.0/maps/maps-web.min.js';\n          \n          await new Promise((resolve, reject) => {\n            script.onload = resolve;\n            script.onerror = () => reject(new Error('Failed to load TomTom SDK'));\n            document.head.appendChild(script);\n            setTimeout(() => reject(new Error('TomTom SDK timeout')), 10000);\n          });\n        }\n\n        // Create map\n        console.log('üó∫Ô∏è Creating TomTom map...');\n        const map = window.tt.map({\n          key: TOMTOM_API_KEY,\n          container: domContainer,\n          style: 'tomtom://vector/1/basic-main',\n          center: [-1.6131, 54.9783],\n          zoom: 10\n        });\n\n        map.on('load', () => {\n          console.log('‚úÖ Map loaded successfully!');\n          setMapLoaded(true);\n          setIsInitializing(false);\n          \n          // Add traffic layer\n          try {\n            map.addLayer({\n              id: 'traffic-flow',\n              type: 'raster',\n              source: {\n                type: 'raster',\n                tiles: [`https://api.tomtom.com/traffic/map/4/tile/flow/relative/{z}/{x}/{y}.png?key=${TOMTOM_API_KEY}`],\n                tileSize: 256\n              },\n              paint: { 'raster-opacity': 0.7 }\n            });\n            console.log('‚úÖ Traffic layer added');\n          } catch (err) {\n            console.warn('‚ö†Ô∏è Could not add traffic layer:', err);\n          }\n        });\n\n        map.on('error', (e) => {\n          console.error('‚ùå Map error:', e);\n          setMapError(`Map error: ${e.error?.message || 'Unknown error'}`);\n          setIsInitializing(false);\n        });\n\n        mapInstance.current = map;\n\n      } catch (error) {\n        console.error('‚ùå Map initialization failed:', error);\n        setMapError(error.message);\n        setIsInitializing(false);\n      }\n    };\n\n    const timer = setTimeout(initMap, 100);\n    return () => {\n      clearTimeout(timer);\n      if (mapInstance.current) {\n        try {\n          mapInstance.current.remove();\n        } catch (e) {\n          console.warn('Map cleanup warning:', e);\n        }\n        mapInstance.current = null;\n      }\n    };\n  }, [TOMTOM_API_KEY]);\n\n  // Handle non-web platforms\n  if (Platform.OS !== 'web') {\n    return (\n      <View style={styles.fallbackContainer}>\n        <Text style={styles.fallbackIcon}>üó∫Ô∏è</Text>\n        <Text style={styles.fallbackText}>\n          Map view only available on web\n        </Text>\n      </View>\n    );\n  }\n\n  // Handle errors\n  if (mapError) {\n    return (\n      <View style={styles.errorContainer}>\n        <Text style={styles.errorIcon}>‚ö†Ô∏è</Text>\n        <Text style={styles.errorTitle}>Map Loading Error</Text>\n        <Text style={styles.errorText}>{mapError}</Text>\n        <View style={styles.debugInfo}>\n          <Text style={styles.debugTitle}>Debug Info:</Text>\n          <Text style={styles.debugText}>API Key: {TOMTOM_API_KEY ? 'Present' : 'Missing'}</Text>\n          <Text style={styles.debugText}>Platform: web</Text>\n          <Text style={styles.debugText}>Container: {mapContainer.current ? 'Ready' : 'Not ready'}</Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <View \n        ref={mapContainer}\n        style={styles.mapContainer}\n        testID=\"map-container\"\n      />\n      \n      {(isInitializing || !mapLoaded) && (\n        <View style={styles.loadingOverlay}>\n          <Text style={styles.loadingIcon}>üó∫Ô∏è</Text>\n          <Text style={styles.loadingText}>\n            {isInitializing ? 'Initializing map...' : 'Loading layers...'}\n          </Text>\n        </View>\n      )}\n      \n      {mapLoaded && (\n        <View style={styles.successOverlay}>\n          <Text style={styles.successText}>‚úÖ Map loaded successfully</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    minHeight: 300,\n    borderRadius: 16,\n    backgroundColor: '#F3F4F6',\n    position: 'relative',\n  },\n  mapContainer: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    borderRadius: 16,\n    backgroundColor: '#F3F4F6',\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(243, 244, 246, 0.9)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 16,\n  },\n  loadingIcon: {\n    fontSize: 48,\n    marginBottom: 16,\n  },\n  loadingText: {\n    fontSize: 16,\n    color: '#374151',\n    fontWeight: '600',\n  },\n  successOverlay: {\n    position: 'absolute',\n    top: 16,\n    left: 16,\n    backgroundColor: 'rgba(16, 185, 129, 0.9)',\n    padding: 8,\n    borderRadius: 8,\n  },\n  successText: {\n    color: 'white',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#FEF2F2',\n    borderRadius: 16,\n    padding: 20,\n    minHeight: 300,\n  },\n  errorIcon: {\n    fontSize: 48,\n    marginBottom: 16,\n  },\n  errorTitle: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: '#DC2626',\n    marginBottom: 8,\n  },\n  errorText: {\n    fontSize: 14,\n    color: '#DC2626',\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  debugInfo: {\n    backgroundColor: 'rgba(0,0,0,0.05)',\n    padding: 12,\n    borderRadius: 8,\n  },\n  debugTitle: {\n    fontSize: 12,\n    fontWeight: '600',\n    marginBottom: 4,\n  },\n  debugText: {\n    fontSize: 11,\n    color: '#6B7280',\n  },\n  fallbackContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F9FAFB',\n    borderRadius: 16,\n    padding: 20,\n    minHeight: 300,\n  },\n  fallbackIcon: {\n    fontSize: 48,\n    marginBottom: 16,\n  },\n  fallbackText: {\n    fontSize: 16,\n    color: '#6B7280',\n    textAlign: 'center',\n  },\n});\n\nexport default EnhancedTrafficMapV2;