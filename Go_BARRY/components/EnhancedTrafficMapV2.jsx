// Go_BARRY/components/EnhancedTrafficMapV2.jsx\n// FIXED: Enhanced TomTom-powered Interactive Traffic Map with proper container initialization\n// Simplified version to resolve map loading issues\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { View, Text, StyleSheet, Platform, TouchableOpacity } from 'react-native';\n\nconst EnhancedTrafficMapV2 = ({ alerts = [], currentAlert = null, alertIndex = 0, zoomTarget = null, onError = null }) => {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [mapError, setMapError] = useState(null);\n  const [isInitializing, setIsInitializing] = useState(false);\n  const [layerVisibility, setLayerVisibility] = useState({\n    trafficFlow: true,\n    trafficIncidents: true,\n    roadworks: true,\n    speedCameras: false\n  });\n\n  // TomTom API key - using environment variable\n  const TOMTOM_API_KEY = process.env.EXPO_PUBLIC_TOMTOM_API_KEY || 'your_tomtom_api_key_here';\n\n  console.log('🗺️ Enhanced TomTom Map V2 - API key available:', TOMTOM_API_KEY ? 'Yes' : 'No');\n\n  // North East England center coordinates\n  const NE_ENGLAND_CENTER = [54.9783, -1.6131]; // [lat, lng] for TomTom\n  const DEFAULT_ZOOM = 10;\n\n  // FIXED: Proper container initialization\n  useEffect(() => {\n    if (Platform.OS !== 'web') return;\n\n    console.log('🗺️ Starting map initialization process...');\n    \n    const initializeMap = async () => {\n      if (isInitializing) {\n        console.log('⏸️ Map initialization already in progress');\n        return;\n      }\n      \n      setIsInitializing(true);\n      setMapError(null);\n      \n      try {\n        console.log('🔄 Waiting for DOM to be ready...');\n        \n        // Wait for DOM to be fully ready\n        await new Promise(resolve => {\n          if (document.readyState === 'complete') {\n            resolve();\n          } else {\n            window.addEventListener('load', resolve, { once: true });\n          }\n        });\n        \n        // Wait for container to be available with proper dimensions\n        let attempts = 0;\n        while (attempts < 30) {\n          if (mapContainer.current) {\n            const rect = mapContainer.current.getBoundingClientRect();\n            console.log(`📏 Container check ${attempts + 1}: ${rect.width}x${rect.height}`);\n            \n            if (rect.width > 0 && rect.height > 0) {\n              console.log('✅ Container ready with dimensions:', rect.width, 'x', rect.height);\n              break;\n            }\n          }\n          \n          await new Promise(resolve => setTimeout(resolve, 100));\n          attempts++;\n        }\n        \n        if (attempts >= 30) {\n          throw new Error('Container failed to get proper dimensions after 3 seconds');\n        }\n\n        // Validate API key\n        if (!TOMTOM_API_KEY || TOMTOM_API_KEY === 'your_tomtom_api_key_here') {\n          throw new Error('TomTom API key not configured. Please set EXPO_PUBLIC_TOMTOM_API_KEY.');\n        }\n\n        // Load TomTom SDK if not already loaded\n        if (!window.tt) {\n          console.log('📦 Loading TomTom Maps SDK...');\n          \n          // Add CSS\n          if (!document.querySelector('link[href*=\"tomtom\"]')) {\n            const link = document.createElement('link');\n            link.href = 'https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.25.0/maps/maps.css';\n            link.rel = 'stylesheet';\n            document.head.appendChild(link);\n          }\n          \n          // Add JavaScript\n          const script = document.createElement('script');\n          script.src = 'https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.25.0/maps/maps-web.min.js';\n          script.async = true;\n          \n          await new Promise((resolve, reject) => {\n            script.onload = () => {\n              console.log('✅ TomTom SDK loaded successfully');\n              resolve();\n            };\n            script.onerror = () => {\n              reject(new Error('Failed to load TomTom Maps SDK'));\n            };\n            document.head.appendChild(script);\n            \n            // Timeout after 10 seconds\n            setTimeout(() => reject(new Error('TomTom SDK load timeout')), 10000);\n          });\n        }\n\n        if (!window.tt) {\n          throw new Error('TomTom Maps SDK not available after loading');\n        }\n\n        console.log('🗺️ Creating TomTom map instance...');\n        \n        // Create map instance\n        const map = window.tt.map({\n          key: TOMTOM_API_KEY,\n          container: mapContainer.current,\n          style: 'tomtom://vector/1/basic-main',\n          center: [-1.6131, 54.9783], // [lng, lat] for TomTom\n          zoom: DEFAULT_ZOOM,\n          language: 'en-GB'\n        });\n\n        console.log('🗺️ Map instance created, waiting for load event...');\n\n        // Set up map event handlers\n        map.on('load', () => {\n          console.log('✅ TomTom Map loaded successfully!');\n          setMapLoaded(true);\n          setMapError(null);\n          setIsInitializing(false);\n          \n          // Add traffic layers\n          addTrafficLayers(map);\n        });\n\n        map.on('error', (e) => {\n          console.error('❌ TomTom Map error:', e);\n          setMapError(`TomTom Map error: ${e.error?.message || 'Unknown error'}`);\n          setIsInitializing(false);\n        });\n\n        mapRef.current = map;\n\n      } catch (error) {\n        console.error('❌ Map initialization failed:', error);\n        setMapError(`Map initialization failed: ${error.message}`);\n        setIsInitializing(false);\n        if (onError) {\n          onError(error);\n        }\n      }\n    };\n\n    // Start initialization with a small delay to ensure DOM is ready\n    const timer = setTimeout(() => {\n      initializeMap();\n    }, 250);\n\n    return () => {\n      clearTimeout(timer);\n      if (mapRef.current) {\n        console.log('🧹 Cleaning up map...');\n        try {\n          mapRef.current.remove();\n        } catch (e) {\n          console.warn('Map cleanup warning:', e.message);\n        }\n        mapRef.current = null;\n      }\n    };\n  }, []); // Initialize once\n\n  // Function to add traffic layers\n  const addTrafficLayers = (map) => {\n    try {\n      // Traffic flow layer\n      map.addLayer({\n        id: 'traffic-flow',\n        type: 'raster',\n        source: {\n          type: 'raster',\n          tiles: [`https://api.tomtom.com/traffic/map/4/tile/flow/relative/{z}/{x}/{y}.png?key=${TOMTOM_API_KEY}`],\n          tileSize: 256\n        },\n        paint: { 'raster-opacity': 0.7 },\n        layout: { visibility: layerVisibility.trafficFlow ? 'visible' : 'none' }\n      });\n\n      // Traffic incidents layer\n      map.addLayer({\n        id: 'traffic-incidents',\n        type: 'raster',\n        source: {\n          type: 'raster',\n          tiles: [`https://api.tomtom.com/traffic/map/4/tile/incidents/s3/{z}/{x}/{y}.png?key=${TOMTOM_API_KEY}`],\n          tileSize: 256\n        },\n        paint: { 'raster-opacity': 0.8 },\n        layout: { visibility: layerVisibility.trafficIncidents ? 'visible' : 'none' }\n      });\n\n      // Roadworks layer\n      map.addLayer({\n        id: 'roadworks-layer',\n        type: 'raster',\n        source: {\n          type: 'raster',\n          tiles: [`https://api.tomtom.com/traffic/map/4/tile/roadworks/{z}/{x}/{y}.png?key=${TOMTOM_API_KEY}`],\n          tileSize: 256\n        },\n        paint: { 'raster-opacity': 0.8 },\n        layout: { visibility: layerVisibility.roadworks ? 'visible' : 'none' }\n      });\n\n      console.log('✅ Traffic layers added successfully');\n    } catch (error) {\n      console.error('❌ Error adding traffic layers:', error);\n    }\n  };\n\n  // Layer toggle function\n  const toggleLayer = (layerId, visible) => {\n    if (!mapRef.current) return;\n\n    const map = mapRef.current;\n    if (map.getLayer(layerId)) {\n      map.setLayoutProperty(layerId, 'visibility', visible ? 'visible' : 'none');\n      console.log(`${visible ? '👁️' : '🙈'} ${layerId} toggled`);\n    }\n  };\n\n  // Add alert markers when alerts change\n  useEffect(() => {\n    if (!mapRef.current || !mapLoaded || !alerts.length) return;\n\n    try {\n      const map = mapRef.current;\n      \n      console.log(`📍 Adding ${alerts.length} alert markers...`);\n      \n      // Clear existing markers (simple approach)\n      const existingMarkers = document.querySelectorAll('.go-barry-marker');\n      existingMarkers.forEach(marker => marker.remove());\n\n      // Add new markers for alerts with coordinates\n      alerts\n        .filter(alert => alert.coordinates && Array.isArray(alert.coordinates) && alert.coordinates.length >= 2)\n        .forEach((alert, index) => {\n          const isCurrent = index === alertIndex;\n          const [lat, lng] = alert.coordinates;\n\n          // Create marker element\n          const markerElement = document.createElement('div');\n          markerElement.className = 'go-barry-marker';\n          \n          // Get severity color\n          const getSeverityColor = () => {\n            switch (alert.severity?.toLowerCase()) {\n              case 'critical':\n              case 'high':\n                return '#DC2626';\n              case 'medium':\n                return '#F59E0B';\n              case 'low':\n                return '#10B981';\n              default:\n                return '#6B7280';\n            }\n          };\n\n          markerElement.innerHTML = `\n            <div style=\"\n              width: ${isCurrent ? '24px' : '16px'};\n              height: ${isCurrent ? '24px' : '16px'};\n              border-radius: 50%;\n              background-color: ${getSeverityColor()};\n              border: 2px solid #FFFFFF;\n              box-shadow: 0 2px 6px rgba(0,0,0,0.3);\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-size: ${isCurrent ? '12px' : '8px'};\n              cursor: pointer;\n            \">\n              ${isCurrent ? '🚨' : '⚠️'}\n            </div>\n          `;\n\n          // Create TomTom marker (TomTom uses [lng, lat] format)\n          const marker = new window.tt.Marker(markerElement)\n            .setLngLat([lng, lat])\n            .addTo(map);\n\n          console.log(`📌 Added marker ${index}: ${alert.title} at [${lat}, ${lng}]`);\n        });\n\n    } catch (error) {\n      console.error('❌ Error adding markers:', error);\n    }\n  }, [alerts, alertIndex, mapLoaded]);\n\n  // Auto-zoom to current alert\n  useEffect(() => {\n    if (!mapRef.current || !mapLoaded || !currentAlert?.coordinates) return;\n\n    try {\n      const map = mapRef.current;\n      const [lat, lng] = currentAlert.coordinates;\n\n      console.log(`🎯 Zooming to alert: ${currentAlert.title} at [${lat}, ${lng}]`);\n\n      map.flyTo({\n        center: [lng, lat], // TomTom uses [lng, lat]\n        zoom: 15,\n        duration: 2000\n      });\n\n    } catch (error) {\n      console.error('❌ Error zooming to alert:', error);\n    }\n  }, [currentAlert, mapLoaded]);\n\n  // Handle non-web platforms\n  if (Platform.OS !== 'web') {\n    return (\n      <View style={styles.unsupportedContainer}>\n        <Text style={styles.unsupportedIcon}>🗺️</Text>\n        <Text style={styles.unsupportedText}>\n          Interactive map view is only available on web browsers\n        </Text>\n      </View>\n    );\n  }\n\n  // Handle map errors\n  if (mapError) {\n    return (\n      <View style={styles.errorContainer}>\n        <Text style={styles.errorIcon}>⚠️</Text>\n        <Text style={styles.errorTitle}>Map Loading Error</Text>\n        <Text style={styles.errorText}>Map container not initialized</Text>\n        <View style={styles.debugContainer}>\n          <Text style={styles.debugTitle}>Debug Info:</Text>\n          <Text style={styles.debugText}>API Key: {TOMTOM_API_KEY ? 'Present' : 'Missing'}</Text>\n          <Text style={styles.debugText}>Platform: {Platform.OS}</Text>\n          <Text style={styles.debugText}>Container: {mapContainer.current ? 'Ready' : 'Not ready'}</Text>\n        </View>\n        <Text style={styles.fallbackText}>\n          Check browser console for detailed errors\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <div\n        ref={mapContainer}\n        style={{\n          width: '100%',\n          height: '100%',\n          minHeight: '300px',\n          borderRadius: '16px',\n          backgroundColor: '#F3F4F6'\n        }}\n      />\n      {(isInitializing || !mapLoaded) && (\n        <View style={styles.loadingOverlay}>\n          <Text style={styles.loadingIcon}>🗺️</Text>\n          <Text style={styles.loadingText}>\n            {isInitializing ? 'Initializing TomTom map...' : 'Loading traffic layers...'}\n          </Text>\n          <Text style={styles.loadingSubtext}>\n            {isInitializing ? 'Setting up container...' : 'Adding traffic data...'}\n          </Text>\n        </View>\n      )}\n      {mapLoaded && (\n        <View style={styles.mapControls}>\n          <TouchableOpacity \n            style={[styles.layerToggle, { backgroundColor: layerVisibility.trafficFlow ? '#10B981' : '#6B7280' }]}\n            onPress={() => {\n              const newVisibility = !layerVisibility.trafficFlow;\n              setLayerVisibility(prev => ({ ...prev, trafficFlow: newVisibility }));\n              toggleLayer('traffic-flow', newVisibility);\n            }}\n          >\n            <Text style={styles.layerToggleText}>🚦</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={[styles.layerToggle, { backgroundColor: layerVisibility.trafficIncidents ? '#DC2626' : '#6B7280' }]}\n            onPress={() => {\n              const newVisibility = !layerVisibility.trafficIncidents;\n              setLayerVisibility(prev => ({ ...prev, trafficIncidents: newVisibility }));\n              toggleLayer('traffic-incidents', newVisibility);\n            }}\n          >\n            <Text style={styles.layerToggleText}>🚨</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={[styles.layerToggle, { backgroundColor: layerVisibility.roadworks ? '#F59E0B' : '#6B7280' }]}\n            onPress={() => {\n              const newVisibility = !layerVisibility.roadworks;\n              setLayerVisibility(prev => ({ ...prev, roadworks: newVisibility }));\n              toggleLayer('roadworks-layer', newVisibility);\n            }}\n          >\n            <Text style={styles.layerToggleText}>🚧</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n      {mapLoaded && alerts.length > 0 && (\n        <View style={styles.mapInfo}>\n          <Text style={styles.mapInfoText}>\n            🗺️ TomTom FIXED • {alerts.filter(a => a.coordinates?.length === 2).length} alerts\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    position: 'relative',\n    borderRadius: 16,\n    overflow: 'hidden',\n    backgroundColor: '#F3F4F6',\n    minHeight: 300,\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(243, 244, 246, 0.95)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 16,\n  },\n  loadingIcon: {\n    fontSize: 48,\n    marginBottom: 16,\n  },\n  loadingText: {\n    color: '#1F2937',\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 8,\n  },\n  loadingSubtext: {\n    color: '#6B7280',\n    fontSize: 14,\n  },\n  mapControls: {\n    position: 'absolute',\n    top: 16,\n    right: 16,\n    flexDirection: 'row',\n    gap: 4,\n    backgroundColor: 'rgba(255, 255, 255, 0.9)',\n    borderRadius: 8,\n    padding: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  layerToggle: {\n    width: 32,\n    height: 32,\n    borderRadius: 6,\n    justifyContent: 'center',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  layerToggleText: {\n    fontSize: 16,\n  },\n  mapInfo: {\n    position: 'absolute',\n    bottom: 16,\n    right: 16,\n    backgroundColor: 'rgba(255, 255, 255, 0.9)',\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  mapInfoText: {\n    color: '#1F2937',\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  unsupportedContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(243, 244, 246, 0.8)',\n    borderRadius: 16,\n    padding: 32,\n    minHeight: 300,\n  },\n  unsupportedIcon: {\n    fontSize: 64,\n    marginBottom: 20,\n  },\n  unsupportedText: {\n    color: '#374151',\n    fontSize: 16,\n    textAlign: 'center',\n    lineHeight: 24,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(239, 68, 68, 0.1)',\n    borderRadius: 16,\n    padding: 32,\n    minHeight: 300,\n  },\n  errorIcon: {\n    fontSize: 64,\n    marginBottom: 20,\n  },\n  errorTitle: {\n    color: '#ef4444',\n    fontSize: 20,\n    fontWeight: '700',\n    marginBottom: 12,\n  },\n  errorText: {\n    color: '#ef4444',\n    fontSize: 14,\n    textAlign: 'center',\n    lineHeight: 20,\n    marginBottom: 16,\n  },\n  debugContainer: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    padding: 16,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  debugTitle: {\n    fontSize: 12,\n    fontWeight: '600',\n    marginBottom: 8,\n  },\n  debugText: {\n    fontSize: 11,\n    color: '#6B7280',\n    marginBottom: 4,\n  },\n  fallbackText: {\n    fontSize: 12,\n    color: '#6B7280',\n    fontStyle: 'italic',\n  },\n});\n\nexport default EnhancedTrafficMapV2;