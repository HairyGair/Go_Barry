// Go_BARRY/components/hooks/useSupervisorBroadcast.js\n// Hook to broadcast supervisor login/logout events to the display screen\n\nimport { useEffect, useCallback } from 'react';\nimport { useSupervisorSync } from './useSupervisorSync';\nimport { useSupervisor } from './useSupervisorSession';\n\n// Hook to handle supervisor broadcasting\nexport const useSupervisorBroadcast = () => {\n  const { supervisorSession, isLoggedIn } = useSupervisor();\n  const { \n    isConnected, \n    sendMessage, \n    connect,\n    broadcastMessage \n  } = useSupervisorSync({\n    clientType: 'supervisor',\n    supervisorId: supervisorSession?.supervisor?.id,\n    sessionId: supervisorSession?.sessionId,\n    autoConnect: true\n  });\n\n  // Broadcast supervisor join when logged in\n  const broadcastSupervisorJoin = useCallback(() => {\n    if (isConnected && supervisorSession) {\n      const supervisorData = {\n        id: supervisorSession.supervisor.id,\n        name: supervisorSession.supervisor.name,\n        role: supervisorSession.supervisor.role,\n        duty: supervisorSession.supervisor.duty,\n        isAdmin: supervisorSession.supervisor.isAdmin,\n        loginTime: supervisorSession.loginTime,\n        sessionId: supervisorSession.sessionId,\n        status: 'active',\n        lastActivity: new Date().toISOString()\n      };\n\n      sendMessage({\n        type: 'SUPERVISOR_JOINED',\n        supervisor: supervisorData\n      });\n\n      console.log('📡 Broadcast supervisor join:', supervisorData.name);\n    }\n  }, [isConnected, supervisorSession, sendMessage]);\n\n  // Broadcast supervisor leave when logged out\n  const broadcastSupervisorLeave = useCallback(() => {\n    if (isConnected && supervisorSession) {\n      sendMessage({\n        type: 'SUPERVISOR_LEFT',\n        supervisorId: supervisorSession.supervisor.id,\n        supervisorName: supervisorSession.supervisor.name\n      });\n\n      console.log('📡 Broadcast supervisor leave:', supervisorSession.supervisor.name);\n    }\n  }, [isConnected, supervisorSession, sendMessage]);\n\n  // Handle login state changes\n  useEffect(() => {\n    if (isLoggedIn && isConnected) {\n      // Small delay to ensure connection is stable\n      const timer = setTimeout(() => {\n        broadcastSupervisorJoin();\n      }, 1000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [isLoggedIn, isConnected, broadcastSupervisorJoin]);\n\n  // Handle logout (beforeunload for browser closure)\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      if (isLoggedIn) {\n        broadcastSupervisorLeave();\n      }\n    };\n\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'hidden' && isLoggedIn) {\n        broadcastSupervisorLeave();\n      }\n    };\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', handleBeforeUnload);\n      document.addEventListener('visibilitychange', handleVisibilityChange);\n      \n      return () => {\n        window.removeEventListener('beforeunload', handleBeforeUnload);\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\n      };\n    }\n  }, [isLoggedIn, broadcastSupervisorLeave]);\n\n  // Send custom message to display screens\n  const sendDisplayMessage = useCallback((message, priority = 'info', duration = 30000) => {\n    if (!isConnected || !supervisorSession) {\n      console.warn('⚠️ Cannot send display message - not connected or logged in');\n      return false;\n    }\n\n    return broadcastMessage(message, priority, duration);\n  }, [isConnected, supervisorSession, broadcastMessage]);\n\n  // Update supervisor activity\n  const updateActivity = useCallback(() => {\n    if (isConnected && supervisorSession) {\n      sendMessage({\n        type: 'SUPERVISOR_ACTIVITY_UPDATE',\n        supervisorId: supervisorSession.supervisor.id,\n        lastActivity: new Date().toISOString()\n      });\n    }\n  }, [isConnected, supervisorSession, sendMessage]);\n\n  // Auto-update activity every 30 seconds\n  useEffect(() => {\n    if (isLoggedIn && isConnected) {\n      const interval = setInterval(updateActivity, 30000);\n      return () => clearInterval(interval);\n    }\n  }, [isLoggedIn, isConnected, updateActivity]);\n\n  return {\n    isConnected,\n    sendDisplayMessage,\n    broadcastSupervisorJoin,\n    broadcastSupervisorLeave,\n    updateActivity\n  };\n};\n\nexport default useSupervisorBroadcast;