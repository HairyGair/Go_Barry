// Go_BARRY/components/IncidentManager.jsx\n// Sector 4: Incident Manager - Manual incident creation & detailed tracking\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  TextInput,\n  Modal,\n  Alert,\n  ActivityIndicator,\n  Dimensions,\n  Platform,\n  Image\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useSupervisorSession } from './hooks/useSupervisorSession';\nimport { useSupervisorSync } from './hooks/useSupervisorSync';\n\nconst { width } = Dimensions.get('window');\nconst isWeb = Platform.OS === 'web';\n\n// Helper function for priority colors\nconst getPriorityColor = (priority) => {\n  switch (priority) {\n    case 'CRITICAL': return '#DC2626';\n    case 'HIGH': return '#EF4444';\n    case 'MEDIUM': return '#F59E0B';\n    case 'LOW': return '#10B981';\n    default: return '#6B7280';\n  }\n};\n\n// Incident types and subtypes based on Go North East operations\nconst INCIDENT_TYPES = {\n  roadwork: {\n    label: 'Roadworks',\n    icon: 'construct',\n    color: '#F59E0B',\n    subtypes: [\n      'Gas Works',\n      'Water Works', \n      'Electric Works',\n      'Telecoms',\n      'Road Resurfacing',\n      'Bridge Works',\n      'Traffic Signals',\n      'Other Utilities'\n    ]\n  },\n  incident: {\n    label: 'Traffic Incident',\n    icon: 'car-sport',\n    color: '#EF4444',\n    subtypes: [\n      'Road Traffic Accident',\n      'Vehicle Breakdown',\n      'Emergency Services',\n      'Police Incident',\n      'Road Closure',\n      'Flooding',\n      'Ice/Snow',\n      'High Winds'\n    ]\n  },\n  event: {\n    label: 'Planned Event',\n    icon: 'calendar',\n    color: '#8B5CF6',\n    subtypes: [\n      'Football Match',\n      'Concert/Festival',\n      'Marathon/Race',\n      'Parade',\n      'Market',\n      'Road Race',\n      'Demonstration',\n      'Other Event'\n    ]\n  },\n  infrastructure: {\n    label: 'Infrastructure',\n    icon: 'business',\n    color: '#10B981',\n    subtypes: [\n      'Bus Stop Closure',\n      'Bus Station Issue',\n      'Bridge Closure',\n      'Tunnel Closure',\n      'Ferry Disruption',\n      'Metro Disruption',\n      'Rail Disruption',\n      'Other Transport'\n    ]\n  }\n};\n\n// Common locations in Go North East area for quick selection\nconst COMMON_LOCATIONS = [\n  'Newcastle City Centre',\n  'Gateshead Interchange',\n  'Metro Centre',\n  'Sunderland City Centre',\n  'Durham City Centre',\n  'Consett',\n  'Hexham',\n  'Cramlington',\n  'A1 Western Bypass',\n  'A19',\n  'A1(M)',\n  'A69',\n  'Tyne Bridge',\n  'Redheugh Bridge',\n  'Swing Bridge',\n  'High Level Bridge'\n];\n\nconst IncidentManager = ({ baseUrl, sector = 4 }) => {\n  const { \n    isLoggedIn, \n    supervisorName, \n    supervisorRole, \n    hasPermission, \n    logActivity \n  } = useSupervisorSession();\n\n  // WebSocket sync for display control\n  const {\n    isConnected,\n    lockOnDisplay,\n    broadcastMessage\n  } = useSupervisorSync({\n    clientType: 'supervisor',\n    supervisorId: supervisorName,\n    autoConnect: isLoggedIn\n  });\n\n  // State management\n  const [incidents, setIncidents] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showNewIncident, setShowNewIncident] = useState(false);\n  const [showIncidentDetails, setShowIncidentDetails] = useState(null);\n  const [showAddNote, setShowAddNote] = useState(null);\n  const [affectedRoutes, setAffectedRoutes] = useState([]);\n  const [gtfsData, setGtfsData] = useState(null);\n  const [newNote, setNewNote] = useState('');\n  const [uploadingImage, setUploadingImage] = useState(false);\n\n  // New incident form state\n  const [newIncident, setNewIncident] = useState({\n    type: '',\n    subtype: '',\n    location: '',\n    coordinates: null,\n    area: '',\n    description: '',\n    startTime: '',\n    endTime: '',\n    severity: 'Medium',\n    priority: 'MEDIUM',\n    affectsRoutes: [],\n    notes: '',\n    images: [],\n    status: 'active'\n  });\n\n  // Auto-complete states\n  const [locationSuggestions, setLocationSuggestions] = useState([]);\n  const [routeSuggestions, setRouteSuggestions] = useState([]);\n  const [searchingLocation, setSearchingLocation] = useState(false);\n\n  // API base URL with fallback\n  const API_BASE = baseUrl || (isWeb \n    ? (window.location.hostname === 'localhost' ? 'http://localhost:3001' : 'https://go-barry.onrender.com')\n    : 'https://go-barry.onrender.com'\n  );\n\n  // Filter incidents by status\n  const activeIncidents = useMemo(() => \n    incidents.filter(incident => incident.status !== 'closed'),\n    [incidents]\n  );\n\n  const closedIncidents = useMemo(() => \n    incidents.filter(incident => incident.status === 'closed'),\n    [incidents]\n  );\n\n  // Load GTFS data and existing incidents\n  useEffect(() => {\n    loadIncidents();\n    loadGTFSData();\n  }, []);\n\n  const loadIncidents = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE}/api/incidents`);\n      if (response.ok) {\n        const data = await response.json();\n        setIncidents(data.incidents || []);\n      }\n    } catch (error) {\n      console.error('Failed to load incidents:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadGTFSData = async () => {\n    try {\n      const response = await fetch(`${API_BASE}/api/routes/gtfs-stats`);\n      if (response.ok) {\n        const data = await response.json();\n        setGtfsData(data);\n      }\n    } catch (error) {\n      console.error('Failed to load GTFS data:', error);\n    }\n  };\n\n  // Location search with GTFS integration\n  const searchLocation = async (query) => {\n    if (!query || query.length < 3) {\n      setLocationSuggestions([]);\n      return;\n    }\n\n    setSearchingLocation(true);\n    try {\n      // Search both geocoding and GTFS stops\n      const [geocodeResponse, gtfsResponse] = await Promise.all([\n        fetch(`${API_BASE}/api/geocode/${encodeURIComponent(query)}`),\n        fetch(`${API_BASE}/api/routes/search-stops?query=${encodeURIComponent(query)}`)\n      ]);\n\n      const suggestions = [];\n\n      // Add geocoded locations\n      if (geocodeResponse.ok) {\n        const geocodeData = await geocodeResponse.json();\n        if (geocodeData.success) {\n          suggestions.push({\n            type: 'geocoded',\n            name: geocodeData.location,\n            coordinates: geocodeData.coordinates,\n            source: 'Geocoding'\n          });\n        }\n      }\n\n      // Add GTFS stops\n      if (gtfsResponse.ok) {\n        const gtfsData = await gtfsResponse.json();\n        if (gtfsData.success && gtfsData.stops) {\n          gtfsData.stops.forEach(stop => {\n            suggestions.push({\n              type: 'bus_stop',\n              name: `${stop.stop_name} (Stop ${stop.stop_code})`,\n              coordinates: { latitude: stop.stop_lat, longitude: stop.stop_lon },\n              source: 'Bus Stop',\n              stopCode: stop.stop_code\n            });\n          });\n        }\n      }\n\n      // Add common locations that match\n      COMMON_LOCATIONS.forEach(location => {\n        if (location.toLowerCase().includes(query.toLowerCase())) {\n          suggestions.push({\n            type: 'common',\n            name: location,\n            source: 'Common Location'\n          });\n        }\n      });\n\n      setLocationSuggestions(suggestions.slice(0, 10));\n    } catch (error) {\n      console.error('Location search error:', error);\n    } finally {\n      setSearchingLocation(false);\n    }\n  };\n\n  // Get affected routes when location changes\n  const getAffectedRoutes = async (coordinates) => {\n    if (!coordinates) return;\n\n    try {\n      const response = await fetch(\n        `${API_BASE}/api/routes/find-near-coordinate?lat=${coordinates.latitude}&lng=${coordinates.longitude}`\n      );\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data.success) {\n          setAffectedRoutes(data.routes || []);\n          setNewIncident(prev => ({\n            ...prev,\n            affectsRoutes: data.routes?.slice(0, 5) || []\n          }));\n        }\n      }\n    } catch (error) {\n      console.error('Failed to find affected routes:', error);\n    }\n  };\n\n  // Show notification helper\n  const showNotification = (message, type = 'info') => {\n    if (isWeb) {\n      console.log(`[${type.toUpperCase()}] ${message}`);\n    } else {\n      Alert.alert(\n        type === 'error' ? 'Error' : type === 'success' ? 'Success' : 'Info',\n        message\n      );\n    }\n  };\n\n  // Reset form\n  const resetForm = () => {\n    setNewIncident({\n      type: '',\n      subtype: '',\n      location: '',\n      coordinates: null,\n      area: '',\n      description: '',\n      startTime: '',\n      endTime: '',\n      severity: 'Medium',\n      priority: 'MEDIUM',\n      affectsRoutes: [],\n      notes: '',\n      images: [],\n      status: 'active'\n    });\n    setAffectedRoutes([]);\n    setLocationSuggestions([]);\n  };\n\n  // Create new incident with enhanced data\n  const createIncident = async () => {\n    if (!isLoggedIn) {\n      showNotification('Please log in as a supervisor to create incidents', 'error');\n      return;\n    }\n\n    if (!newIncident.type || !newIncident.location) {\n      showNotification('Please fill in required fields (Type and Location)', 'error');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const incidentData = {\n        ...newIncident,\n        id: 'incident_' + Date.now(),\n        createdBy: supervisorName,\n        createdByRole: supervisorRole,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        status: 'active',\n        source: 'manual',\n        notes: newIncident.notes ? [{\n          id: 'note_' + Date.now(),\n          text: newIncident.notes,\n          addedBy: supervisorName,\n          addedAt: new Date().toISOString()\n        }] : [],\n        images: newIncident.images || []\n      };\n\n      // Store incident (enhanced for Sector 4)\n      setIncidents(prev => [incidentData, ...prev]);\n      \n      // Log activity\n      logActivity(\n        'CREATE_INCIDENT', \n        `Created ${newIncident.type} incident at ${newIncident.location}`,\n        incidentData.id\n      );\n\n      // Auto-push to display if Critical\n      if (newIncident.priority === 'CRITICAL' && isConnected) {\n        lockOnDisplay(incidentData.id, 'Critical incident auto-pushed to display');\n        showNotification('Critical incident pushed to display automatically', 'success');\n      }\n\n      // Reset form\n      resetForm();\n      setShowNewIncident(false);\n      showNotification('Incident created successfully', 'success');\n    } catch (error) {\n      console.error('Failed to create incident:', error);\n      showNotification('Failed to create incident', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add note to incident\n  const addNoteToIncident = async (incidentId) => {\n    if (!newNote.trim()) {\n      showNotification('Please enter a note', 'error');\n      return;\n    }\n\n    const noteData = {\n      id: 'note_' + Date.now(),\n      text: newNote.trim(),\n      addedBy: supervisorName,\n      addedAt: new Date().toISOString()\n    };\n\n    setIncidents(prev => prev.map(incident => {\n      if (incident.id === incidentId) {\n        return {\n          ...incident,\n          notes: [...(incident.notes || []), noteData],\n          updatedAt: new Date().toISOString()\n        };\n      }\n      return incident;\n    }));\n\n    logActivity('ADD_NOTE', `Added note to incident ${incidentId}`, incidentId);\n    setNewNote('');\n    setShowAddNote(null);\n    showNotification('Note added successfully', 'success');\n  };\n\n  // Update incident status\n  const updateIncidentStatus = async (incidentId, newStatus) => {\n    setIncidents(prev => prev.map(incident => {\n      if (incident.id === incidentId) {\n        return {\n          ...incident,\n          status: newStatus,\n          updatedAt: new Date().toISOString(),\n          closedBy: newStatus === 'closed' ? supervisorName : undefined,\n          closedAt: newStatus === 'closed' ? new Date().toISOString() : undefined\n        };\n      }\n      return incident;\n    }));\n\n    logActivity('UPDATE_STATUS', `Updated incident ${incidentId} status to ${newStatus}`, incidentId);\n    showNotification(`Incident ${newStatus === 'closed' ? 'closed' : 'updated'} successfully`, 'success');\n  };\n\n  // Push incident to display\n  const pushIncidentToDisplay = async (incident) => {\n    if (!isConnected) {\n      showNotification('Not connected to display system', 'error');\n      return;\n    }\n\n    const reason = isWeb \n      ? prompt('Reason for pushing incident to display:')\n      : 'Incident pushed to display';\n      \n    if (!reason) return;\n\n    const success = lockOnDisplay(incident.id, reason);\n    \n    if (success) {\n      showNotification(`\"${incident.location}\" incident pushed to display`, 'success');\n    } else {\n      showNotification('Failed to push incident to display', 'error');\n    }\n  };\n\n  // Handle image upload (placeholder for future implementation)\n  const handleImageUpload = async () => {\n    // Placeholder for image upload functionality\n    showNotification('Image upload feature coming soon', 'info');\n  };\n\n  // Delete incident\n  const deleteIncident = async (incidentId) => {\n    if (!isLoggedIn) return;\n\n    const confirmDelete = isWeb ? \n      window.confirm('Are you sure you want to delete this incident?') :\n      await new Promise(resolve => {\n        Alert.alert(\n          'Delete Incident',\n          'Are you sure you want to delete this incident?',\n          [\n            { text: 'Cancel', style: 'cancel', onPress: () => resolve(false) },\n            { text: 'Delete', style: 'destructive', onPress: () => resolve(true) }\n          ]\n        );\n      });\n\n    if (!confirmDelete) return;\n\n    setIncidents(prev => prev.filter(incident => incident.id !== incidentId));\n    logActivity('DELETE_INCIDENT', `Deleted incident ${incidentId}`, incidentId);\n    showNotification('Incident deleted successfully', 'success');\n  };\n\n  if (!isLoggedIn) {\n    return (\n      <View style={styles.unauthorizedContainer}>\n        <Ionicons name=\"lock-closed\" size={48} color=\"#6B7280\" />\n        <Text style={styles.unauthorizedTitle}>Supervisor Access Required</Text>\n        <Text style={styles.unauthorizedText}>\n          Please log in as a supervisor to access incident management\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.headerContent}>\n          <Text style={styles.title}>Sector 4: Incident Manager</Text>\n          <Text style={styles.subtitle}>Manual incident creation & detailed tracking</Text>\n        </View>\n        \n        {hasPermission('create_incidents') && (\n          <TouchableOpacity\n            style={styles.createButton}\n            onPress={() => setShowNewIncident(true)}\n          >\n            <Ionicons name=\"add\" size={20} color=\"#FFFFFF\" />\n            <Text style={styles.createButtonText}>New Incident</Text>\n          </TouchableOpacity>\n        )}\n      </View>\n\n      {/* Stats */}\n      <View style={styles.statsContainer}>\n        <View style={styles.statCard}>\n          <Text style={styles.statNumber}>{activeIncidents.length}</Text>\n          <Text style={styles.statLabel}>Active Incidents</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={styles.statNumber}>{closedIncidents.length}</Text>\n          <Text style={styles.statLabel}>Closed Today</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={styles.statNumber}>{affectedRoutes.length}</Text>\n          <Text style={styles.statLabel}>Affected Routes</Text>\n        </View>\n        <View style={styles.statCard}>\n          <View style={[styles.connectionDot, { backgroundColor: isConnected ? '#10B981' : '#EF4444' }]} />\n          <Text style={styles.statLabel}>Display {isConnected ? 'Connected' : 'Offline'}</Text>\n        </View>\n      </View>\n\n      {/* Incidents List */}\n      <ScrollView style={styles.incidentsList}>\n        {loading && activeIncidents.length === 0 ? (\n          <View style={styles.loadingContainer}>\n            <ActivityIndicator size=\"large\" color=\"#3B82F6\" />\n            <Text style={styles.loadingText}>Loading incidents...</Text>\n          </View>\n        ) : activeIncidents.length === 0 ? (\n          <View style={styles.emptyContainer}>\n            <Ionicons name=\"document-outline\" size={48} color=\"#9CA3AF\" />\n            <Text style={styles.emptyTitle}>No Active Incidents</Text>\n            <Text style={styles.emptyText}>All clear! No incidents are currently affecting services.</Text>\n          </View>\n        ) : (\n          activeIncidents.map((incident, index) => (\n            <View key={incident.id || index} style={styles.incidentCard}>\n              <View style={styles.incidentHeader}>\n                <View style={styles.incidentType}>\n                  <Ionicons \n                    name={INCIDENT_TYPES[incident.type]?.icon || 'alert-circle'} \n                    size={20} \n                    color={INCIDENT_TYPES[incident.type]?.color || '#6B7280'} \n                  />\n                  <Text style={styles.incidentTypeText}>\n                    {INCIDENT_TYPES[incident.type]?.label || incident.type}\n                  </Text>\n                  {incident.priority === 'CRITICAL' && (\n                    <View style={styles.criticalBadge}>\n                      <Text style={styles.criticalBadgeText}>CRITICAL</Text>\n                    </View>\n                  )}\n                </View>\n                \n                <View style={styles.incidentActions}>\n                  {incident.priority === 'CRITICAL' && isConnected && (\n                    <TouchableOpacity\n                      style={styles.pushToDisplayButton}\n                      onPress={() => pushIncidentToDisplay(incident)}\n                    >\n                      <Ionicons name=\"tv\" size={16} color=\"#FFFFFF\" />\n                    </TouchableOpacity>\n                  )}\n                  \n                  <TouchableOpacity\n                    style={styles.detailsButton}\n                    onPress={() => setShowIncidentDetails(incident)}\n                  >\n                    <Ionicons name=\"eye\" size={16} color=\"#3B82F6\" />\n                  </TouchableOpacity>\n                  \n                  {hasPermission('create_incidents') && (\n                    <TouchableOpacity\n                      style={styles.deleteButton}\n                      onPress={() => deleteIncident(incident.id)}\n                    >\n                      <Ionicons name=\"trash-outline\" size={16} color=\"#EF4444\" />\n                    </TouchableOpacity>\n                  )}\n                </View>\n              </View>\n\n              <Text style={styles.incidentLocation}>{incident.location}</Text>\n              \n              {incident.subtype && (\n                <Text style={styles.incidentSubtype}>{incident.subtype}</Text>\n              )}\n              \n              {incident.description && (\n                <Text style={styles.incidentDescription} numberOfLines={2}>{incident.description}</Text>\n              )}\n\n              {incident.affectsRoutes && incident.affectsRoutes.length > 0 && (\n                <View style={styles.routesContainer}>\n                  <Text style={styles.routesLabel}>Affected Routes:</Text>\n                  <View style={styles.routesList}>\n                    {incident.affectsRoutes.slice(0, 6).map((route, idx) => (\n                      <View key={idx} style={styles.routeBadge}>\n                        <Text style={styles.routeBadgeText}>{route}</Text>\n                      </View>\n                    ))}\n                    {incident.affectsRoutes.length > 6 && (\n                      <Text style={styles.moreRoutesText}>+{incident.affectsRoutes.length - 6} more</Text>\n                    )}\n                  </View>\n                </View>\n              )}\n\n              {/* Quick Actions */}\n              <View style={styles.quickActions}>\n                <TouchableOpacity\n                  style={styles.addNoteButton}\n                  onPress={() => setShowAddNote(incident.id)}\n                >\n                  <Ionicons name=\"create\" size={14} color=\"#6B7280\" />\n                  <Text style={styles.quickActionText}>Add Note</Text>\n                </TouchableOpacity>\n                \n                <TouchableOpacity\n                  style={styles.closeIncidentButton}\n                  onPress={() => updateIncidentStatus(incident.id, 'closed')}\n                >\n                  <Ionicons name=\"checkmark-circle\" size={14} color=\"#10B981\" />\n                  <Text style={styles.quickActionText}>Close</Text>\n                </TouchableOpacity>\n\n                {incident.notes && incident.notes.length > 0 && (\n                  <View style={styles.notesIndicator}>\n                    <Ionicons name=\"document-text\" size={14} color=\"#F59E0B\" />\n                    <Text style={styles.notesCount}>{incident.notes.length} notes</Text>\n                  </View>\n                )}\n              </View>\n\n              <View style={styles.incidentFooter}>\n                <Text style={styles.incidentTime}>\n                  Created: {new Date(incident.createdAt).toLocaleString()}\n                </Text>\n                <Text style={styles.incidentCreator}>\n                  by {incident.createdBy}\n                </Text>\n              </View>\n            </View>\n          ))\n        )}\n      </ScrollView>\n\n      {/* New Incident Modal */}\n      <Modal\n        visible={showNewIncident}\n        animationType=\"slide\"\n        presentationStyle=\"pageSheet\"\n        onRequestClose={() => setShowNewIncident(false)}\n      >\n        <View style={styles.modalContainer}>\n          <View style={styles.modalHeader}>\n            <Text style={styles.modalTitle}>Create New Incident</Text>\n            <TouchableOpacity\n              style={styles.modalCloseButton}\n              onPress={() => setShowNewIncident(false)}\n            >\n              <Ionicons name=\"close\" size={24} color=\"#6B7280\" />\n            </TouchableOpacity>\n          </View>\n\n          <ScrollView style={styles.modalContent}>\n            {/* Incident Type */}\n            <View style={styles.formSection}>\n              <Text style={styles.formLabel}>Incident Type *</Text>\n              <View style={styles.typeGrid}>\n                {Object.entries(INCIDENT_TYPES).map(([key, type]) => (\n                  <TouchableOpacity\n                    key={key}\n                    style={[\n                      styles.typeCard,\n                      newIncident.type === key && styles.typeCardSelected\n                    ]}\n                    onPress={() => setNewIncident(prev => ({ ...prev, type: key, subtype: '' }))}\n                  >\n                    <Ionicons name={type.icon} size={24} color={type.color} />\n                    <Text style={styles.typeCardText}>{type.label}</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            {/* Subtype */}\n            {newIncident.type && (\n              <View style={styles.formSection}>\n                <Text style={styles.formLabel}>Subtype</Text>\n                <View style={styles.subtypeGrid}>\n                  {INCIDENT_TYPES[newIncident.type].subtypes.map((subtype, index) => (\n                    <TouchableOpacity\n                      key={index}\n                      style={[\n                        styles.subtypeButton,\n                        newIncident.subtype === subtype && styles.subtypeButtonSelected\n                      ]}\n                      onPress={() => setNewIncident(prev => ({ ...prev, subtype }))}\n                    >\n                      <Text style={[\n                        styles.subtypeButtonText,\n                        newIncident.subtype === subtype && styles.subtypeButtonTextSelected\n                      ]}>\n                        {subtype}\n                      </Text>\n                    </TouchableOpacity>\n                  ))}\n                </View>\n              </View>\n            )}\n\n            {/* Location Search */}\n            <View style={styles.formSection}>\n              <Text style={styles.formLabel}>Location *</Text>\n              <View style={styles.searchContainer}>\n                <TextInput\n                  style={styles.searchInput}\n                  placeholder=\"Search for location, bus stop, or area...\"\n                  value={newIncident.location}\n                  onChangeText={(text) => {\n                    setNewIncident(prev => ({ ...prev, location: text }));\n                    searchLocation(text);\n                  }}\n                />\n                {searchingLocation && (\n                  <ActivityIndicator size=\"small\" color=\"#3B82F6\" />\n                )}\n              </View>\n\n              {/* Location Suggestions */}\n              {locationSuggestions.length > 0 && (\n                <View style={styles.suggestionsContainer}>\n                  {locationSuggestions.map((suggestion, index) => (\n                    <TouchableOpacity\n                      key={index}\n                      style={styles.suggestionItem}\n                      onPress={() => {\n                        setNewIncident(prev => ({\n                          ...prev,\n                          location: suggestion.name,\n                          coordinates: suggestion.coordinates\n                        }));\n                        setLocationSuggestions([]);\n                        if (suggestion.coordinates) {\n                          getAffectedRoutes(suggestion.coordinates);\n                        }\n                      }}\n                    >\n                      <Ionicons \n                        name={suggestion.type === 'bus_stop' ? 'bus' : 'location'} \n                        size={16} \n                        color=\"#6B7280\" \n                      />\n                      <Text style={styles.suggestionText}>{suggestion.name}</Text>\n                      <Text style={styles.suggestionSource}>{suggestion.source}</Text>\n                    </TouchableOpacity>\n                  ))}\n                </View>\n              )}\n            </View>\n\n            {/* Priority Level */}\n            <View style={styles.formSection}>\n              <Text style={styles.formLabel}>Priority Level</Text>\n              <View style={styles.priorityGrid}>\n                {['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'].map((priority) => (\n                  <TouchableOpacity\n                    key={priority}\n                    style={[\n                      styles.priorityButton,\n                      newIncident.priority === priority && styles.priorityButtonSelected,\n                      { backgroundColor: getPriorityColor(priority) }\n                    ]}\n                    onPress={() => setNewIncident(prev => ({ ...prev, priority }))}\n                  >\n                    <Text style={styles.priorityButtonText}>{priority}</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n              {newIncident.priority === 'CRITICAL' && (\n                <Text style={styles.criticalWarning}>\n                  ⚠️ Critical incidents will be automatically pushed to display\n                </Text>\n              )}\n            </View>\n\n            {/* Description */}\n            <View style={styles.formSection}>\n              <Text style={styles.formLabel}>Description</Text>\n              <TextInput\n                style={styles.textArea}\n                placeholder=\"Describe the incident and its impact...\"\n                value={newIncident.description}\n                onChangeText={(text) => setNewIncident(prev => ({ ...prev, description: text }))}\n                multiline\n                numberOfLines={3}\n              />\n            </View>\n\n            {/* Initial Notes */}\n            <View style={styles.formSection}>\n              <Text style={styles.formLabel}>Initial Notes</Text>\n              <TextInput\n                style={styles.textArea}\n                placeholder=\"Add any initial notes about this incident...\"\n                value={newIncident.notes}\n                onChangeText={(text) => setNewIncident(prev => ({ ...prev, notes: text }))}\n                multiline\n                numberOfLines={2}\n              />\n            </View>\n\n            {/* Image Upload Placeholder */}\n            <View style={styles.formSection}>\n              <Text style={styles.formLabel}>Images</Text>\n              <TouchableOpacity\n                style={styles.imageUploadButton}\n                onPress={handleImageUpload}\n              >\n                <Ionicons name=\"camera\" size={24} color=\"#6B7280\" />\n                <Text style={styles.imageUploadText}>Add Photos (Coming Soon)</Text>\n              </TouchableOpacity>\n            </View>\n\n            {/* Affected Routes */}\n            {affectedRoutes.length > 0 && (\n              <View style={styles.formSection}>\n                <Text style={styles.formLabel}>Affected Routes (Auto-detected)</Text>\n                <View style={styles.routesList}>\n                  {affectedRoutes.map((route, index) => (\n                    <View key={index} style={styles.routeBadge}>\n                      <Text style={styles.routeBadgeText}>{route}</Text>\n                    </View>\n                  ))}\n                </View>\n                <Text style={styles.formHelper}>\n                  Based on location proximity using GTFS data\n                </Text>\n              </View>\n            )}\n\n            {/* Action Buttons */}\n            <View style={styles.modalActions}>\n              <TouchableOpacity\n                style={styles.cancelButton}\n                onPress={() => setShowNewIncident(false)}\n              >\n                <Text style={styles.cancelButtonText}>Cancel</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity\n                style={[\n                  styles.submitButton,\n                  (!newIncident.type || !newIncident.location) && styles.submitButtonDisabled\n                ]}\n                onPress={createIncident}\n                disabled={!newIncident.type || !newIncident.location || loading}\n              >\n                {loading ? (\n                  <ActivityIndicator size=\"small\" color=\"#FFFFFF\" />\n                ) : (\n                  <Text style={styles.submitButtonText}>Create Incident</Text>\n                )}\n              </TouchableOpacity>\n            </View>\n          </ScrollView>\n        </View>\n      </Modal>\n\n      {/* Incident Details Modal */}\n      {showIncidentDetails && (\n        <Modal\n          visible={!!showIncidentDetails}\n          animationType=\"slide\"\n          presentationStyle=\"pageSheet\"\n          onRequestClose={() => setShowIncidentDetails(null)}\n        >\n          <View style={styles.modalContainer}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Incident Details</Text>\n              <TouchableOpacity\n                style={styles.modalCloseButton}\n                onPress={() => setShowIncidentDetails(null)}\n              >\n                <Ionicons name=\"close\" size={24} color=\"#6B7280\" />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView style={styles.modalContent}>\n              <View style={styles.detailSection}>\n                <Text style={styles.detailLabel}>Type & Location</Text>\n                <View style={styles.detailRow}>\n                  <Ionicons \n                    name={INCIDENT_TYPES[showIncidentDetails.type]?.icon || 'alert-circle'} \n                    size={20} \n                    color={INCIDENT_TYPES[showIncidentDetails.type]?.color || '#6B7280'} \n                  />\n                  <Text style={styles.detailValue}>\n                    {INCIDENT_TYPES[showIncidentDetails.type]?.label || showIncidentDetails.type}\n                  </Text>\n                  {showIncidentDetails.priority === 'CRITICAL' && (\n                    <View style={styles.criticalBadge}>\n                      <Text style={styles.criticalBadgeText}>CRITICAL</Text>\n                    </View>\n                  )}\n                </View>\n                <Text style={styles.detailLocation}>{showIncidentDetails.location}</Text>\n                {showIncidentDetails.subtype && (\n                  <Text style={styles.detailSubtype}>{showIncidentDetails.subtype}</Text>\n                )}\n              </View>\n\n              {showIncidentDetails.description && (\n                <View style={styles.detailSection}>\n                  <Text style={styles.detailLabel}>Description</Text>\n                  <Text style={styles.detailValue}>{showIncidentDetails.description}</Text>\n                </View>\n              )}\n\n              {showIncidentDetails.affectsRoutes && showIncidentDetails.affectsRoutes.length > 0 && (\n                <View style={styles.detailSection}>\n                  <Text style={styles.detailLabel}>Affected Routes</Text>\n                  <View style={styles.routesList}>\n                    {showIncidentDetails.affectsRoutes.map((route, idx) => (\n                      <View key={idx} style={styles.routeBadge}>\n                        <Text style={styles.routeBadgeText}>{route}</Text>\n                      </View>\n                    ))}\n                  </View>\n                </View>\n              )}\n\n              {/* Notes Section */}\n              <View style={styles.detailSection}>\n                <View style={styles.sectionHeader}>\n                  <Text style={styles.detailLabel}>Notes & Updates</Text>\n                  <TouchableOpacity\n                    style={styles.addNoteIconButton}\n                    onPress={() => setShowAddNote(showIncidentDetails.id)}\n                  >\n                    <Ionicons name=\"add\" size={20} color=\"#3B82F6\" />\n                  </TouchableOpacity>\n                </View>\n                \n                {showIncidentDetails.notes && showIncidentDetails.notes.length > 0 ? (\n                  showIncidentDetails.notes.map((note, index) => (\n                    <View key={note.id || index} style={styles.noteItem}>\n                      <View style={styles.noteHeader}>\n                        <Text style={styles.noteAuthor}>{note.addedBy}</Text>\n                        <Text style={styles.noteTime}>\n                          {new Date(note.addedAt).toLocaleString()}\n                        </Text>\n                      </View>\n                      <Text style={styles.noteText}>{note.text}</Text>\n                    </View>\n                  ))\n                ) : (\n                  <Text style={styles.noNotesText}>No notes added yet</Text>\n                )}\n              </View>\n\n              {/* Status Actions */}\n              <View style={styles.detailSection}>\n                <Text style={styles.detailLabel}>Actions</Text>\n                <View style={styles.actionButtons}>\n                  {showIncidentDetails.priority === 'CRITICAL' && isConnected && (\n                    <TouchableOpacity\n                      style={styles.pushDisplayButton}\n                      onPress={() => pushIncidentToDisplay(showIncidentDetails)}\n                    >\n                      <Ionicons name=\"tv\" size={20} color=\"#FFFFFF\" />\n                      <Text style={styles.actionButtonText}>Push to Display</Text>\n                    </TouchableOpacity>\n                  )}\n                  \n                  <TouchableOpacity\n                    style={styles.closeButton}\n                    onPress={() => {\n                      updateIncidentStatus(showIncidentDetails.id, 'closed');\n                      setShowIncidentDetails(null);\n                    }}\n                  >\n                    <Ionicons name=\"checkmark-circle\" size={20} color=\"#FFFFFF\" />\n                    <Text style={styles.actionButtonText}>Close Incident</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n\n              <View style={styles.detailSection}>\n                <Text style={styles.detailLabel}>Incident Information</Text>\n                <Text style={styles.metaText}>Created: {new Date(showIncidentDetails.createdAt).toLocaleString()}</Text>\n                <Text style={styles.metaText}>Created by: {showIncidentDetails.createdBy} ({showIncidentDetails.createdByRole})</Text>\n                {showIncidentDetails.updatedAt && (\n                  <Text style={styles.metaText}>Last updated: {new Date(showIncidentDetails.updatedAt).toLocaleString()}</Text>\n                )}\n                <Text style={styles.metaText}>Status: {showIncidentDetails.status}</Text>\n              </View>\n            </ScrollView>\n          </View>\n        </Modal>\n      )}\n\n      {/* Add Note Modal */}\n      {showAddNote && (\n        <Modal\n          visible={!!showAddNote}\n          transparent\n          animationType=\"fade\"\n          onRequestClose={() => setShowAddNote(null)}\n        >\n          <View style={styles.noteModalOverlay}>\n            <View style={styles.noteModalContent}>\n              <View style={styles.noteModalHeader}>\n                <Text style={styles.noteModalTitle}>Add Note</Text>\n                <TouchableOpacity onPress={() => setShowAddNote(null)}>\n                  <Ionicons name=\"close\" size={24} color=\"#6B7280\" />\n                </TouchableOpacity>\n              </View>\n              \n              <TextInput\n                style={styles.noteInput}\n                placeholder=\"Enter your note...\"\n                value={newNote}\n                onChangeText={setNewNote}\n                multiline\n                numberOfLines={4}\n                autoFocus\n              />\n              \n              <View style={styles.noteModalActions}>\n                <TouchableOpacity\n                  style={styles.noteCancelButton}\n                  onPress={() => {\n                    setNewNote('');\n                    setShowAddNote(null);\n                  }}\n                >\n                  <Text style={styles.noteCancelText}>Cancel</Text>\n                </TouchableOpacity>\n                \n                <TouchableOpacity\n                  style={styles.noteSubmitButton}\n                  onPress={() => addNoteToIncident(showAddNote)}\n                  disabled={!newNote.trim()}\n                >\n                  <Text style={styles.noteSubmitText}>Add Note</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n        </Modal>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F8FAFC',\n  },\n  unauthorizedContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F8FAFC',\n    padding: 20,\n  },\n  unauthorizedTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: '#374151',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  unauthorizedText: {\n    fontSize: 14,\n    color: '#6B7280',\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n  header: {\n    backgroundColor: '#FFFFFF',\n    padding: 20,\n    paddingTop: 40,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E7EB',\n  },\n  headerContent: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: '#6B7280',\n  },\n  createButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#3B82F6',\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    borderRadius: 8,\n    gap: 8,\n  },\n  createButtonText: {\n    color: '#FFFFFF',\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    padding: 16,\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    backgroundColor: '#FFFFFF',\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#6B7280',\n    textAlign: 'center',\n  },\n  connectionDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    marginBottom: 4,\n  },\n  incidentsList: {\n    flex: 1,\n    padding: 16,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 40,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: '#6B7280',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#374151',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 14,\n    color: '#6B7280',\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n  incidentCard: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  incidentHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  incidentType: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  incidentTypeText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#374151',\n  },\n  criticalBadge: {\n    backgroundColor: '#DC2626',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n    marginLeft: 8,\n  },\n  criticalBadgeText: {\n    color: '#FFFFFF',\n    fontSize: 10,\n    fontWeight: 'bold',\n  },\n  incidentActions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  pushToDisplayButton: {\n    backgroundColor: '#059669',\n    borderRadius: 4,\n    padding: 6,\n  },\n  detailsButton: {\n    backgroundColor: '#EFF6FF',\n    borderRadius: 4,\n    padding: 6,\n  },\n  deleteButton: {\n    padding: 4,\n  },\n  incidentLocation: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  incidentSubtype: {\n    fontSize: 14,\n    color: '#6B7280',\n    marginBottom: 8,\n  },\n  incidentDescription: {\n    fontSize: 14,\n    color: '#374151',\n    lineHeight: 20,\n    marginBottom: 12,\n  },\n  routesContainer: {\n    marginBottom: 12,\n  },\n  routesLabel: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#374151',\n    marginBottom: 6,\n  },\n  routesList: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 6,\n  },\n  routeBadge: {\n    backgroundColor: '#EFF6FF',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: '#DBEAFE',\n  },\n  routeBadgeText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#1E40AF',\n  },\n  moreRoutesText: {\n    fontSize: 12,\n    color: '#6B7280',\n    fontStyle: 'italic',\n  },\n  quickActions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n    marginTop: 8,\n    paddingTop: 8,\n    borderTopWidth: 1,\n    borderTopColor: '#F3F4F6',\n  },\n  addNoteButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    backgroundColor: '#F3F4F6',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n  },\n  closeIncidentButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    backgroundColor: '#ECFDF5',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n  },\n  quickActionText: {\n    fontSize: 12,\n    color: '#6B7280',\n    fontWeight: '500',\n  },\n  notesIndicator: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    marginLeft: 'auto',\n  },\n  notesCount: {\n    fontSize: 12,\n    color: '#F59E0B',\n    fontWeight: '500',\n  },\n  incidentFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: '#F3F4F6',\n  },\n  incidentTime: {\n    fontSize: 12,\n    color: '#6B7280',\n  },\n  incidentCreator: {\n    fontSize: 12,\n    color: '#6B7280',\n    fontWeight: '500',\n  },\n  modalContainer: {\n    flex: 1,\n    backgroundColor: '#FFFFFF',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    paddingTop: 60,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E7EB',\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: '#1F2937',\n  },\n  modalCloseButton: {\n    padding: 4,\n  },\n  modalContent: {\n    flex: 1,\n    padding: 20,\n  },\n  formSection: {\n    marginBottom: 24,\n  },\n  formLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#374151',\n    marginBottom: 8,\n  },\n  formHelper: {\n    fontSize: 12,\n    color: '#6B7280',\n    marginTop: 4,\n  },\n  typeGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  typeCard: {\n    width: (width - 64) / 2,\n    backgroundColor: '#F9FAFB',\n    borderWidth: 2,\n    borderColor: '#E5E7EB',\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    gap: 8,\n  },\n  typeCardSelected: {\n    borderColor: '#3B82F6',\n    backgroundColor: '#EFF6FF',\n  },\n  typeCardText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#374151',\n    textAlign: 'center',\n  },\n  subtypeGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  subtypeButton: {\n    backgroundColor: '#F3F4F6',\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n  },\n  subtypeButtonSelected: {\n    backgroundColor: '#3B82F6',\n    borderColor: '#3B82F6',\n  },\n  subtypeButtonText: {\n    fontSize: 12,\n    color: '#374151',\n    fontWeight: '500',\n  },\n  subtypeButtonTextSelected: {\n    color: '#FFFFFF',\n  },\n  priorityGrid: {\n    flexDirection: 'row',\n    gap: 8,\n    flexWrap: 'wrap',\n  },\n  priorityButton: {\n    flex: 1,\n    minWidth: (width - 80) / 4,\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n    opacity: 0.7,\n  },\n  priorityButtonSelected: {\n    opacity: 1,\n  },\n  priorityButtonText: {\n    color: '#FFFFFF',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  criticalWarning: {\n    fontSize: 12,\n    color: '#DC2626',\n    marginTop: 8,\n    fontWeight: '500',\n  },\n  searchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n    borderRadius: 8,\n    backgroundColor: '#FFFFFF',\n    paddingHorizontal: 12,\n    gap: 8,\n  },\n  searchInput: {\n    flex: 1,\n    fontSize: 16,\n    color: '#1F2937',\n    paddingVertical: 12,\n  },\n  suggestionsContainer: {\n    marginTop: 8,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  suggestionItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#F3F4F6',\n    gap: 8,\n  },\n  suggestionText: {\n    flex: 1,\n    fontSize: 14,\n    color: '#1F2937',\n  },\n  suggestionSource: {\n    fontSize: 12,\n    color: '#6B7280',\n  },\n  textArea: {\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n    borderRadius: 8,\n    backgroundColor: '#FFFFFF',\n    padding: 12,\n    fontSize: 16,\n    color: '#1F2937',\n    textAlignVertical: 'top',\n    minHeight: 80,\n  },\n  imageUploadButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n    backgroundColor: '#F9FAFB',\n    borderWidth: 2,\n    borderColor: '#E5E7EB',\n    borderStyle: 'dashed',\n    borderRadius: 8,\n    paddingVertical: 24,\n  },\n  imageUploadText: {\n    fontSize: 14,\n    color: '#6B7280',\n  },\n  modalActions: {\n    flexDirection: 'row',\n    gap: 12,\n    paddingTop: 20,\n  },\n  cancelButton: {\n    flex: 1,\n    backgroundColor: '#F3F4F6',\n    paddingVertical: 14,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#374151',\n  },\n  submitButton: {\n    flex: 2,\n    backgroundColor: '#3B82F6',\n    paddingVertical: 14,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  submitButtonDisabled: {\n    backgroundColor: '#E5E7EB',\n  },\n  submitButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#FFFFFF',\n  },\n  // Incident Details Modal Styles\n  detailSection: {\n    marginBottom: 24,\n  },\n  detailLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#374151',\n    marginBottom: 8,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  detailValue: {\n    fontSize: 16,\n    color: '#1F2937',\n    lineHeight: 24,\n  },\n  detailLocation: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  detailSubtype: {\n    fontSize: 14,\n    color: '#6B7280',\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  addNoteIconButton: {\n    backgroundColor: '#EFF6FF',\n    borderRadius: 6,\n    padding: 6,\n  },\n  noteItem: {\n    backgroundColor: '#F9FAFB',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 8,\n  },\n  noteHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 6,\n  },\n  noteAuthor: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#374151',\n  },\n  noteTime: {\n    fontSize: 12,\n    color: '#6B7280',\n  },\n  noteText: {\n    fontSize: 14,\n    color: '#1F2937',\n    lineHeight: 20,\n  },\n  noNotesText: {\n    fontSize: 14,\n    color: '#9CA3AF',\n    fontStyle: 'italic',\n    textAlign: 'center',\n    paddingVertical: 16,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  pushDisplayButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n    backgroundColor: '#059669',\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  closeButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n    backgroundColor: '#10B981',\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  actionButtonText: {\n    color: '#FFFFFF',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  metaText: {\n    fontSize: 12,\n    color: '#6B7280',\n    marginBottom: 4,\n  },\n  // Add Note Modal Styles\n  noteModalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  noteModalContent: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    padding: 24,\n    width: '100%',\n    maxWidth: 400,\n  },\n  noteModalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  noteModalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1F2937',\n  },\n  noteInput: {\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n    borderRadius: 8,\n    padding: 12,\n    fontSize: 16,\n    color: '#1F2937',\n    textAlignVertical: 'top',\n    minHeight: 100,\n    marginBottom: 16,\n  },\n  noteModalActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  noteCancelButton: {\n    flex: 1,\n    backgroundColor: '#F3F4F6',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  noteCancelText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#374151',\n  },\n  noteSubmitButton: {\n    flex: 1,\n    backgroundColor: '#3B82F6',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  noteSubmitText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#FFFFFF',\n  },\n});\n\nexport default IncidentManager;\n