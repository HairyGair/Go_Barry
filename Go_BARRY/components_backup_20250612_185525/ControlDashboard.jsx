// Go_BARRY/components/ControlDashboard.jsx\n// Sector 3: Control Dashboard - Supervisor's Home View\n// Main supervisor interface with one-click display push functionality\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n  Platform,\n  ActivityIndicator,\n  Modal,\n  RefreshControl\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useSupervisorSync } from './hooks/useSupervisorSync';\nimport SupervisorLogin from './SupervisorLogin';\nimport { useSupervisorSession } from './hooks/useSupervisorSession';\n\nconst isWeb = Platform.OS === 'web';\n\n// Priority colors\nconst getPriorityColor = (priority) => {\n  switch (priority?.toUpperCase()) {\n    case 'CRITICAL': return '#DC2626';\n    case 'HIGH': return '#EF4444';\n    case 'MEDIUM': return '#F59E0B';\n    case 'LOW': return '#10B981';\n    case 'WARNING': return '#F59E0B';\n    case 'INFO': return '#3B82F6';\n    default: return '#6B7280';\n  }\n};\n\nconst ControlDashboard = ({ sector = 3 }) => {\n  // State management\n  const [alertsData, setAlertsData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [showLogin, setShowLogin] = useState(false);\n  const [showDisplayQueue, setShowDisplayQueue] = useState(false);\n  const [refreshing, setRefreshing] = useState(false);\n  \n  // Supervisor session\n  const { supervisorSession, logout } = useSupervisorSession();\n  \n  // WebSocket sync for display control\n  const {\n    isConnected,\n    acknowledgedAlerts,\n    dismissedFromDisplay,\n    lockedOnDisplay,\n    connectedDisplays,\n    acknowledgeAlert,\n    dismissFromDisplay,\n    lockOnDisplay,\n    unlockFromDisplay,\n    broadcastMessage\n  } = useSupervisorSync({\n    clientType: 'supervisor',\n    supervisorId: supervisorSession?.supervisor?.id,\n    sessionId: supervisorSession?.sessionId,\n    autoConnect: !!supervisorSession\n  });\n\n  // API configuration\n  const API_BASE = process.env.EXPO_PUBLIC_API_BASE_URL || 'https://go-barry.onrender.com';\n\n  // Fetch alerts data\n  const fetchAlertsData = useCallback(async () => {\n    try {\n      const response = await fetch(`${API_BASE}/api/alerts-enhanced`, {\n        headers: {\n          'Accept': 'application/json',\n          'Cache-Control': 'no-cache'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      setAlertsData(data);\n      setLastUpdated(new Date());\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching alerts:', err);\n      setError(err.message);\n    }\n  }, [API_BASE]);\n\n  // Auto-refresh\n  useEffect(() => {\n    fetchAlertsData();\n    setLoading(false);\n    \n    const interval = setInterval(fetchAlertsData, 15000);\n    return () => clearInterval(interval);\n  }, [fetchAlertsData]);\n\n  // Handle refresh\n  const onRefresh = useCallback(async () => {\n    setRefreshing(true);\n    await fetchAlertsData();\n    setRefreshing(false);\n  }, [fetchAlertsData]);\n\n  // Process alerts by priority\n  const processedAlerts = useMemo(() => {\n    if (!alertsData?.alerts) return { critical: [], high: [], medium: [], low: [] };\n    \n    const alerts = alertsData.alerts;\n    return {\n      critical: alerts.filter(a => a.severity?.toLowerCase() === 'high' || a.priority === 'CRITICAL'),\n      high: alerts.filter(a => a.severity?.toLowerCase() === 'medium' || a.priority === 'HIGH'),\n      medium: alerts.filter(a => a.severity?.toLowerCase() === 'low' || a.priority === 'MEDIUM'),\n      low: alerts.filter(a => !a.severity || a.priority === 'LOW')\n    };\n  }, [alertsData]);\n\n  // Get display queue alerts\n  const displayQueueAlerts = useMemo(() => {\n    if (!alertsData?.alerts) return [];\n    \n    return alertsData.alerts\n      .filter(alert => !dismissedFromDisplay.has(alert.id))\n      .sort((a, b) => {\n        const priorityOrder = { 'CRITICAL': 4, 'HIGH': 3, 'MEDIUM': 2, 'LOW': 1 };\n        const aPriority = a.priority || a.severity?.toUpperCase() || 'LOW';\n        const bPriority = b.priority || b.severity?.toUpperCase() || 'LOW';\n        return priorityOrder[bPriority] - priorityOrder[aPriority];\n      });\n  }, [alertsData, dismissedFromDisplay]);\n\n  // Handle push to display\n  const handlePushToDisplay = useCallback(async (alert) => {\n    if (!supervisorSession) {\n      Alert.alert('Login Required', 'Please login as supervisor to push alerts to display.');\n      setShowLogin(true);\n      return;\n    }\n\n    const reason = isWeb \n      ? prompt('Reason for pushing this alert to display:')\n      : 'Pushed to display via mobile';\n      \n    if (!reason) return;\n\n    const success = lockOnDisplay(alert.id, reason);\n    \n    if (success) {\n      showNotification(`\"${alert.title}\" pushed to display`, 'success');\n    } else {\n      showNotification('Failed to push alert to display', 'error');\n    }\n  }, [supervisorSession, lockOnDisplay]);\n\n  // Handle acknowledge\n  const handleAcknowledge = useCallback(async (alert) => {\n    if (!supervisorSession) {\n      Alert.alert('Login Required', 'Please login as supervisor to acknowledge alerts.');\n      setShowLogin(true);\n      return;\n    }\n\n    const reason = isWeb \n      ? prompt('Reason for acknowledging this alert:')\n      : 'Acknowledged via mobile';\n      \n    if (!reason) return;\n\n    const success = acknowledgeAlert(alert.id, reason);\n    \n    if (success) {\n      showNotification(`\"${alert.title}\" acknowledged`, 'success');\n    } else {\n      showNotification('Failed to acknowledge alert', 'error');\n    }\n  }, [supervisorSession, acknowledgeAlert]);\n\n  // Handle dismiss\n  const handleDismiss = useCallback(async (alert) => {\n    if (!supervisorSession) {\n      Alert.alert('Login Required', 'Please login as supervisor to dismiss alerts.');\n      setShowLogin(true);\n      return;\n    }\n\n    const reason = isWeb \n      ? prompt('Reason for dismissing this alert:')\n      : 'Dismissed via mobile';\n      \n    if (!reason) return;\n\n    const success = dismissFromDisplay(alert.id, reason);\n    \n    if (success) {\n      showNotification(`\"${alert.title}\" dismissed from display`, 'success');\n    } else {\n      showNotification('Failed to dismiss alert', 'error');\n    }\n  }, [supervisorSession, dismissFromDisplay]);\n\n  // Show notification helper\n  const showNotification = useCallback((message, type = 'info') => {\n    if (isWeb) {\n      console.log(`[${type.toUpperCase()}] ${message}`);\n    } else {\n      Alert.alert(\n        type === 'error' ? 'Error' : 'Success',\n        message\n      );\n    }\n  }, []);\n\n  // Alert card with display controls\n  const AlertCard = ({ alert, showPushButton = true }) => {\n    const priority = alert.priority || alert.severity?.toUpperCase() || 'LOW';\n    const priorityColor = getPriorityColor(priority);\n    const isAcknowledged = acknowledgedAlerts.has(alert.id);\n    const isOnDisplay = !dismissedFromDisplay.has(alert.id);\n    const isLocked = lockedOnDisplay.has(alert.id);\n    \n    return (\n      <View style={[styles.alertCard, { borderLeftColor: priorityColor }]}>\n        <View style={styles.alertHeader}>\n          <View style={styles.alertInfo}>\n            <Text style={styles.alertTitle} numberOfLines={2}>\n              {alert.title || 'Traffic Incident'}\n            </Text>\n            <Text style={styles.alertLocation}>\n              üìç {alert.location || 'Location being resolved...'}\n            </Text>\n            {alert.description && (\n              <Text style={styles.alertDescription} numberOfLines={2}>\n                {alert.description}\n              </Text>\n            )}\n          </View>\n          \n          <View style={styles.alertStatus}>\n            <View style={[styles.priorityBadge, { backgroundColor: priorityColor }]}>\n              <Text style={styles.priorityText}>{priority}</Text>\n            </View>\n            \n            {isLocked && (\n              <View style={styles.statusBadge}>\n                <Ionicons name=\"lock-closed\" size={12} color=\"#F59E0B\" />\n                <Text style={styles.statusText}>LOCKED</Text>\n              </View>\n            )}\n            \n            {isAcknowledged && (\n              <View style={[styles.statusBadge, styles.acknowledgedBadge]}>\n                <Ionicons name=\"checkmark\" size={12} color=\"#10B981\" />\n                <Text style={[styles.statusText, { color: '#10B981' }]}>ACK</Text>\n              </View>\n            )}\n          </View>\n        </View>\n\n        {alert.affectsRoutes && alert.affectsRoutes.length > 0 && (\n          <Text style={styles.routesText}>\n            üöå Routes: {alert.affectsRoutes.slice(0, 6).join(', ')}\n            {alert.affectsRoutes.length > 6 ? ` +${alert.affectsRoutes.length - 6} more` : ''}\n          </Text>\n        )}\n\n        <View style={styles.alertActions}>\n          {showPushButton && supervisorSession && (\n            <TouchableOpacity\n              style={[styles.actionButton, styles.pushButton]}\n              onPress={() => handlePushToDisplay(alert)}\n              disabled={isLocked}\n            >\n              <Ionicons name=\"checkmark-circle\" size={18} color=\"#FFFFFF\" />\n              <Text style={styles.actionButtonText}>\n                {isLocked ? 'On Display' : 'Push to Display'}\n              </Text>\n            </TouchableOpacity>\n          )}\n          \n          {supervisorSession && (\n            <>\n              <TouchableOpacity\n                style={[styles.actionButton, styles.acknowledgeButton]}\n                onPress={() => handleAcknowledge(alert)}\n                disabled={isAcknowledged}\n              >\n                <Ionicons name=\"checkmark\" size={16} color=\"#FFFFFF\" />\n                <Text style={styles.actionButtonText}>\n                  {isAcknowledged ? 'Acknowledged' : 'Acknowledge'}\n                </Text>\n              </TouchableOpacity>\n              \n              {isOnDisplay && (\n                <TouchableOpacity\n                  style={[styles.actionButton, styles.dismissButton]}\n                  onPress={() => handleDismiss(alert)}\n                >\n                  <Ionicons name=\"eye-off\" size={16} color=\"#FFFFFF\" />\n                  <Text style={styles.actionButtonText}>Dismiss</Text>\n                </TouchableOpacity>\n              )}\n            </>\n          )}\n        </View>\n        \n        <View style={styles.alertFooter}>\n          <Text style={styles.alertTime}>\n            {alert.timestamp ? new Date(alert.timestamp).toLocaleTimeString() : 'Unknown time'}\n          </Text>\n          <Text style={styles.alertSource}>\n            {alert.source || 'Unknown source'}\n          </Text>\n        </View>\n      </View>\n    );\n  };\n\n  // Display Queue Modal\n  const DisplayQueueModal = () => (\n    <Modal\n      visible={showDisplayQueue}\n      transparent\n      animationType=\"slide\"\n      onRequestClose={() => setShowDisplayQueue(false)}\n    >\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContent}>\n          <View style={styles.modalHeader}>\n            <Text style={styles.modalTitle}>What's On Display Now</Text>\n            <TouchableOpacity onPress={() => setShowDisplayQueue(false)}>\n              <Ionicons name=\"close\" size={24} color=\"#6B7280\" />\n            </TouchableOpacity>\n          </View>\n          \n          <View style={styles.displayStats}>\n            <View style={styles.displayStat}>\n              <Text style={styles.displayStatValue}>{connectedDisplays}</Text>\n              <Text style={styles.displayStatLabel}>Connected Displays</Text>\n            </View>\n            <View style={styles.displayStat}>\n              <Text style={styles.displayStatValue}>{displayQueueAlerts.length}</Text>\n              <Text style={styles.displayStatLabel}>Visible Alerts</Text>\n            </View>\n            <View style={styles.displayStat}>\n              <Text style={styles.displayStatValue}>{lockedOnDisplay.size}</Text>\n              <Text style={styles.displayStatLabel}>Locked Items</Text>\n            </View>\n          </View>\n          \n          <ScrollView style={styles.displayQueueList}>\n            <Text style={styles.queueSectionTitle}>Current Display Queue (Priority Order):</Text>\n            \n            {displayQueueAlerts.length > 0 ? (\n              displayQueueAlerts.map((alert, index) => (\n                <View key={alert.id} style={styles.queueItem}>\n                  <View style={styles.queueHeader}>\n                    <Text style={styles.queuePosition}>#{index + 1}</Text>\n                    <View style={[styles.queuePriority, { backgroundColor: getPriorityColor(alert.priority || alert.severity?.toUpperCase()) }]}>\n                      <Text style={styles.queuePriorityText}>\n                        {alert.priority || alert.severity?.toUpperCase() || 'LOW'}\n                      </Text>\n                    </View>\n                    {lockedOnDisplay.has(alert.id) && (\n                      <View style={styles.queueLocked}>\n                        <Ionicons name=\"lock-closed\" size={12} color=\"#F59E0B\" />\n                        <Text style={styles.queueLockedText}>LOCKED</Text>\n                      </View>\n                    )}\n                  </View>\n                  \n                  <Text style={styles.queueItemTitle}>{alert.title}</Text>\n                  <Text style={styles.queueItemLocation}>{alert.location}</Text>\n                </View>\n              ))\n            ) : (\n              <View style={styles.emptyQueue}>\n                <Ionicons name=\"tv-outline\" size={48} color=\"#9CA3AF\" />\n                <Text style={styles.emptyQueueText}>No alerts on display</Text>\n              </View>\n            )}\n          </ScrollView>\n        </View>\n      </View>\n    </Modal>\n  );\n\n  // Main render\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#3B82F6\" />\n        <Text style={styles.loadingText}>Loading control dashboard...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <View style={styles.headerLeft}>\n          <Text style={styles.title}>Sector 3: Control Dashboard</Text>\n          <Text style={styles.subtitle}>Supervisor's Home View</Text>\n        </View>\n        \n        <View style={styles.headerRight}>\n          {supervisorSession ? (\n            <View style={styles.supervisorInfo}>\n              <Ionicons name=\"shield-checkmark\" size={16} color=\"#10B981\" />\n              <Text style={styles.supervisorName}>\n                {supervisorSession.supervisor.name}\n              </Text>\n              <TouchableOpacity onPress={logout} style={styles.logoutButton}>\n                <Ionicons name=\"log-out\" size={16} color=\"#EF4444\" />\n              </TouchableOpacity>\n            </View>\n          ) : (\n            <TouchableOpacity\n              onPress={() => setShowLogin(true)}\n              style={styles.loginButton}\n            >\n              <Ionicons name=\"person\" size={16} color=\"#FFFFFF\" />\n              <Text style={styles.loginButtonText}>Login</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n\n      <View style={styles.controlBar}>\n        <View style={styles.connectionStatus}>\n          <View style={[\n            styles.connectionDot, \n            { backgroundColor: isConnected ? '#10B981' : '#EF4444' }\n          ]} />\n          <Text style={styles.connectionText}>\n            {isConnected ? `Connected ‚Ä¢ ${connectedDisplays} displays` : 'Disconnected'}\n          </Text>\n        </View>\n        \n        <TouchableOpacity\n          style={styles.displayQueueButton}\n          onPress={() => setShowDisplayQueue(true)}\n        >\n          <Ionicons name=\"tv\" size={20} color=\"#FFFFFF\" />\n          <Text style={styles.displayQueueButtonText}>What's On Display</Text>\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView \n        style={styles.content}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            colors={['#3B82F6']}\n            tintColor=\"#3B82F6\"\n          />\n        }\n      >\n        {/* Statistics */}\n        <View style={styles.statsSection}>\n          <View style={styles.statCard}>\n            <Text style={styles.statValue}>{processedAlerts.critical.length}</Text>\n            <Text style={styles.statLabel}>Critical</Text>\n          </View>\n          <View style={styles.statCard}>\n            <Text style={styles.statValue}>{processedAlerts.high.length}</Text>\n            <Text style={styles.statLabel}>High</Text>\n          </View>\n          <View style={styles.statCard}>\n            <Text style={styles.statValue}>{displayQueueAlerts.length}</Text>\n            <Text style={styles.statLabel}>On Display</Text>\n          </View>\n          <View style={styles.statCard}>\n            <Text style={styles.statValue}>{acknowledgedAlerts.size}</Text>\n            <Text style={styles.statLabel}>Acknowledged</Text>\n          </View>\n        </View>\n\n        {/* Critical Alerts */}\n        {processedAlerts.critical.length > 0 && (\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <Ionicons name=\"warning\" size={20} color=\"#DC2626\" />\n              <Text style={[styles.sectionTitle, { color: '#DC2626' }]}>\n                Critical Alerts ({processedAlerts.critical.length})\n              </Text>\n            </View>\n            {processedAlerts.critical.map(alert => (\n              <AlertCard key={alert.id} alert={alert} showPushButton={true} />\n            ))}\n          </View>\n        )}\n\n        {/* High Priority Alerts */}\n        {processedAlerts.high.length > 0 && (\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <Ionicons name=\"alert-circle\" size={20} color=\"#EF4444\" />\n              <Text style={[styles.sectionTitle, { color: '#EF4444' }]}>\n                High Priority Alerts ({processedAlerts.high.length})\n              </Text>\n            </View>\n            {processedAlerts.high.map(alert => (\n              <AlertCard key={alert.id} alert={alert} showPushButton={true} />\n            ))}\n          </View>\n        )}\n\n        {/* Medium Priority Alerts */}\n        {processedAlerts.medium.length > 0 && (\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <Ionicons name=\"information-circle\" size={20} color=\"#F59E0B\" />\n              <Text style={[styles.sectionTitle, { color: '#F59E0B' }]}>\n                Medium Priority Alerts ({processedAlerts.medium.length})\n              </Text>\n            </View>\n            {processedAlerts.medium.map(alert => (\n              <AlertCard key={alert.id} alert={alert} showPushButton={true} />\n            ))}\n          </View>\n        )}\n\n        {/* No Alerts State */}\n        {!processedAlerts.critical.length && !processedAlerts.high.length && !processedAlerts.medium.length && (\n          <View style={styles.noAlertsContainer}>\n            <Ionicons name=\"checkmark-circle\" size={64} color=\"#10B981\" />\n            <Text style={styles.noAlertsTitle}>All Clear!</Text>\n            <Text style={styles.noAlertsText}>No active traffic alerts requiring attention</Text>\n            {lastUpdated && (\n              <Text style={styles.lastUpdatedText}>\n                Last updated: {lastUpdated.toLocaleTimeString()}\n              </Text>\n            )}\n          </View>\n        )}\n      </ScrollView>\n\n      {/* Supervisor Login Modal */}\n      <SupervisorLogin\n        visible={showLogin}\n        onClose={() => setShowLogin(false)}\n      />\n\n      {/* Display Queue Modal */}\n      <DisplayQueueModal />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F3F4F6',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F3F4F6',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: '#6B7280',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E7EB',\n    ...Platform.select({\n      web: { paddingTop: 16 },\n      default: { paddingTop: 40 }\n    }),\n  },\n  headerLeft: {\n    flex: 1,\n  },\n  headerRight: {\n    alignItems: 'flex-end',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1F2937',\n  },\n  subtitle: {\n    fontSize: 14,\n    color: '#6B7280',\n    marginTop: 4,\n  },\n  supervisorInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  supervisorName: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#1F2937',\n  },\n  logoutButton: {\n    padding: 4,\n  },\n  loginButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    backgroundColor: '#3B82F6',\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 6,\n  },\n  loginButtonText: {\n    color: '#FFFFFF',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  controlBar: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E7EB',\n  },\n  connectionStatus: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  connectionDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n  },\n  connectionText: {\n    fontSize: 12,\n    color: '#6B7280',\n  },\n  displayQueueButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: '#059669',\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    borderRadius: 8,\n  },\n  displayQueueButtonText: {\n    color: '#FFFFFF',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  statsSection: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 24,\n  },\n  statCard: {\n    flex: 1,\n    backgroundColor: '#FFFFFF',\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  statValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1F2937',\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#6B7280',\n    marginTop: 4,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 12,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1F2937',\n  },\n  alertCard: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 12,\n    borderLeftWidth: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  alertHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  alertInfo: {\n    flex: 1,\n    marginRight: 12,\n  },\n  alertTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  alertLocation: {\n    fontSize: 14,\n    color: '#6B7280',\n    marginBottom: 4,\n  },\n  alertDescription: {\n    fontSize: 14,\n    color: '#4B5563',\n  },\n  alertStatus: {\n    alignItems: 'flex-end',\n    gap: 6,\n  },\n  priorityBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n  },\n  priorityText: {\n    fontSize: 10,\n    color: '#FFFFFF',\n    fontWeight: 'bold',\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    backgroundColor: '#F3F4F6',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  acknowledgedBadge: {\n    backgroundColor: '#ECFDF5',\n  },\n  statusText: {\n    fontSize: 10,\n    color: '#6B7280',\n    fontWeight: '500',\n  },\n  routesText: {\n    fontSize: 12,\n    color: '#7C3AED',\n    marginBottom: 12,\n  },\n  alertActions: {\n    flexDirection: 'row',\n    gap: 8,\n    marginBottom: 8,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 6,\n  },\n  pushButton: {\n    backgroundColor: '#10B981',\n    flex: 1,\n  },\n  acknowledgeButton: {\n    backgroundColor: '#6B7280',\n  },\n  dismissButton: {\n    backgroundColor: '#EF4444',\n  },\n  actionButtonText: {\n    color: '#FFFFFF',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  alertFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  alertTime: {\n    fontSize: 12,\n    color: '#9CA3AF',\n  },\n  alertSource: {\n    fontSize: 12,\n    color: '#9CA3AF',\n  },\n  noAlertsContainer: {\n    alignItems: 'center',\n    paddingVertical: 60,\n  },\n  noAlertsTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#10B981',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  noAlertsText: {\n    fontSize: 16,\n    color: '#6B7280',\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  lastUpdatedText: {\n    fontSize: 12,\n    color: '#9CA3AF',\n  },\n  // Modal styles\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  modalContent: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    padding: 24,\n    width: '100%',\n    maxWidth: 600,\n    maxHeight: '80%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1F2937',\n  },\n  displayStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    backgroundColor: '#F9FAFB',\n    padding: 16,\n    borderRadius: 8,\n    marginBottom: 20,\n  },\n  displayStat: {\n    alignItems: 'center',\n  },\n  displayStatValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1F2937',\n  },\n  displayStatLabel: {\n    fontSize: 12,\n    color: '#6B7280',\n    marginTop: 4,\n  },\n  displayQueueList: {\n    flex: 1,\n    maxHeight: 400,\n  },\n  queueSectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1F2937',\n    marginBottom: 12,\n  },\n  queueItem: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n  },\n  queueHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  queuePosition: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: '#6B7280',\n    backgroundColor: '#F3F4F6',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n    minWidth: 24,\n    textAlign: 'center',\n  },\n  queuePriority: {\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  queuePriorityText: {\n    fontSize: 10,\n    color: '#FFFFFF',\n    fontWeight: 'bold',\n  },\n  queueLocked: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    backgroundColor: '#FEF3C7',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  queueLockedText: {\n    fontSize: 10,\n    color: '#F59E0B',\n    fontWeight: 'bold',\n  },\n  queueItemTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  queueItemLocation: {\n    fontSize: 12,\n    color: '#6B7280',\n  },\n  emptyQueue: {\n    alignItems: 'center',\n    paddingVertical: 40,\n  },\n  emptyQueueText: {\n    fontSize: 16,\n    color: '#9CA3AF',\n    marginTop: 12,\n  },\n});\n\nexport default ControlDashboard;\n