// Go_BARRY/app/display.jsx\n// Professional Display Screen matching Supervisor Interface Design\n// Shows live supervisor information with modern light color scheme\n\nimport React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, ScrollView, Dimensions, Platform } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport TrafficMap from '../components/TrafficMap';\nimport SupervisorCard from '../components/SupervisorCard';\nimport { useSupervisorSync } from '../components/hooks/useSupervisorSync';\n\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\n\nconst ProfessionalDisplayScreen = () => {\n  const [currentAlerts, setCurrentAlerts] = useState([]);\n  const [alertIndex, setAlertIndex] = useState(0);\n  const [lastDataUpdate, setLastDataUpdate] = useState(null);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [seriouslyAffectedAreas, setSeriouslyAffectedAreas] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [connectionError, setConnectionError] = useState(false);\n  const [intelligenceData, setIntelligenceData] = useState(null);\n  const [dataSourceHealth, setDataSourceHealth] = useState(null);\n  const [mlPerformance, setMlPerformance] = useState(null);\n\n  // Live supervisor sync\n  const {\n    connectionState,\n    isConnected: wsConnected,\n    acknowledgedAlerts,\n    priorityOverrides,\n    supervisorNotes,\n    customMessages,\n    activeMode: displayMode,\n    connectedSupervisors,\n    activeSupervisors\n  } = useSupervisorSync({\n    clientType: 'display',\n    autoConnect: true,\n    onConnectionChange: (connected) => {\n      console.log('🔌 Display WebSocket:', connected ? 'Connected' : 'Disconnected');\n    },\n    onError: (error) => {\n      console.error('❌ Display WebSocket error:', error);\n    }\n  });\n\n  const API_BASE_URL = Platform.OS === 'web' && window.location.hostname === 'localhost' \n    ? 'http://localhost:3001' \n    : 'https://go-barry.onrender.com';\n\n  // Update time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Auto-cycle through alerts every 20 seconds\n  useEffect(() => {\n    if (currentAlerts.length <= 1) return;\n    \n    const cycleTimer = setInterval(() => {\n      setAlertIndex(prev => (prev + 1) % currentAlerts.length);\n    }, 20000);\n    \n    return () => clearInterval(cycleTimer);\n  }, [currentAlerts.length]);\n\n  // Fetch enhanced alerts with ML intelligence\n  const fetchAlerts = async () => {\n    try {\n      setConnectionError(false);\n      \n      console.log('🔄 Display Screen: Fetching alerts...');\n      \n      const endpoints = [\n        `${API_BASE_URL}/api/alerts-enhanced?t=${Date.now()}&no_cache=true`,\n        `${API_BASE_URL}/api/alerts?t=${Date.now()}&no_cache=true`\n      ];\n      \n      let response;\n      let data;\n      \n      for (const endpoint of endpoints) {\n        try {\n          response = await fetch(endpoint, {\n            method: 'GET',\n            headers: { \n              'Accept': 'application/json',\n              'Cache-Control': 'no-cache',\n              'User-Agent': 'BARRY-Display-Screen'\n            },\n            timeout: 15000\n          });\n          \n          if (!response.ok) {\n            continue;\n          }\n          \n          data = await response.json();\n          break;\n          \n        } catch (endpointError) {\n          continue;\n        }\n      }\n      \n      if (!data) {\n        throw new Error('All endpoints failed');\n      }\n      \n      if (data.success && data.alerts) {\n        const filteredAlerts = data.alerts.filter(alert => \n          !alert.id?.includes('barry_v3') && \n          !alert.id?.includes('sample') && \n          alert.source !== 'go_barry_v3'\n        );\n        \n        setCurrentAlerts(filteredAlerts);\n        setLastDataUpdate(new Date());\n        updateAffectedAreas(filteredAlerts);\n        setIsLoading(false);\n        \n        console.log(`✅ Display alerts updated: ${filteredAlerts.length} alerts`);\n        \n      } else {\n        throw new Error('Invalid response format');\n      }\n    } catch (error) {\n      console.error('❌ Display Screen: Error fetching alerts:', error);\n      setConnectionError(true);\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch additional intelligence data\n  const fetchIntelligenceData = async () => {\n    try {\n      const [health, performance] = await Promise.all([\n        fetch(`${API_BASE_URL}/api/intelligence/health`),\n        fetch(`${API_BASE_URL}/api/intelligence/ml/performance`)\n      ]);\n      \n      const [healthData, performanceData] = await Promise.all([\n        health.ok ? health.json() : null,\n        performance.ok ? performance.json() : null\n      ]);\n      \n      setDataSourceHealth(healthData?.health || null);\n      setMlPerformance(performanceData?.performance || null);\n      \n    } catch (error) {\n      console.error('Error fetching intelligence data:', error);\n    }\n  };\n\n  // Update affected areas analysis\n  const updateAffectedAreas = (alerts) => {\n    const areaMap = new Map();\n    \n    alerts.forEach(alert => {\n      if (!alert.location) return;\n      \n      let area = alert.location;\n      if (area.includes('A1')) area = 'A1 Corridor';\n      else if (area.includes('Newcastle') || area.includes('Gateshead')) area = 'Newcastle City Centre';\n      else if (area.includes('Sunderland')) area = 'Sunderland Area';\n      else if (area.includes('Durham')) area = 'Durham Area';\n      else area = area.split(',')[0];\n      \n      if (!areaMap.has(area)) areaMap.set(area, []);\n      areaMap.get(area).push(alert);\n    });\n    \n    const affected = [];\n    areaMap.forEach((alerts, area) => {\n      if (alerts.length >= 2) {\n        affected.push({ area, count: alerts.length });\n      }\n    });\n    \n    setSeriouslyAffectedAreas(affected);\n  };\n\n  // Initialize data fetching\n  useEffect(() => {\n    fetchAlerts();\n    fetchIntelligenceData();\n    \n    const alertInterval = setInterval(fetchAlerts, 15000); // Every 15 seconds\n    const intelligenceInterval = setInterval(fetchIntelligenceData, 30000); // Every 30 seconds\n    \n    return () => {\n      clearInterval(alertInterval);\n      clearInterval(intelligenceInterval);\n    };\n  }, []);\n\n  // Format time display\n  const formatTime = (date) => {\n    return date.toLocaleTimeString('en-GB', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    });\n  };\n\n  // Calculate data freshness\n  const getDataFreshness = () => {\n    if (!lastDataUpdate) return { status: 'fresh', text: 'Live', details: 'Data current' };\n    \n    const ageSeconds = Math.floor((new Date() - lastDataUpdate) / 1000);\n    const ageMinutes = Math.floor(ageSeconds / 60);\n    \n    if (ageSeconds < 30) return { status: 'fresh', text: 'Live', details: 'Data current' };\n    if (ageSeconds < 120) return { status: 'stale', text: `${ageSeconds}s old`, details: 'Data slightly stale' };\n    return { status: 'old', text: `${ageMinutes}m old`, details: 'Data needs refresh' };\n  };\n\n  // Calculate metrics\n  const currentAlert = currentAlerts[alertIndex];\n  const criticalCount = currentAlerts.filter(a => a.severity === 'High').length;\n  const affectedRoutesCount = new Set(currentAlerts.flatMap(a => a.affectsRoutes || [])).size;\n  const mapAlertsCount = currentAlerts.filter(a => a.coordinates?.length === 2).length;\n  const freshness = getDataFreshness();\n\n  // Freshness dot style helper\n  const getFreshnessStyle = (status) => {\n    switch (status) {\n      case 'fresh': return { backgroundColor: '#10B981' };\n      case 'stale': return { backgroundColor: '#F59E0B' };\n      default: return { backgroundColor: '#EF4444' };\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Professional Header */}\n      <View style={styles.header}>\n        <View style={styles.headerLeft}>\n          <View style={styles.logoContainer}>\n            <Text style={styles.logoText}>🚦</Text>\n          </View>\n          <View style={styles.titleContainer}>\n            <Text style={styles.systemTitle}>GO BARRY Control Room</Text>\n            <Text style={styles.displayTitle}>Professional Traffic Intelligence Display</Text>\n          </View>\n        </View>\n        \n        <View style={styles.headerCenter}>\n          <View style={styles.systemMetrics}>\n            <View style={styles.metric}>\n              <Text style={styles.metricValue}>{currentAlerts.length}</Text>\n              <Text style={styles.metricLabel}>Total Alerts</Text>\n            </View>\n            <View style={styles.metric}>\n              <Text style={styles.metricValue}>{criticalCount}</Text>\n              <Text style={styles.metricLabel}>Critical</Text>\n            </View>\n            <View style={styles.metric}>\n              <Text style={styles.metricValue}>{affectedRoutesCount}</Text>\n              <Text style={styles.metricLabel}>Routes</Text>\n            </View>\n            <View style={styles.metric}>\n              <Text style={styles.metricValue}>{connectedSupervisors}</Text>\n              <Text style={styles.metricLabel}>Supervisors</Text>\n            </View>\n            <View style={styles.metric}>\n              <Text style={styles.metricValue}>\n                {mlPerformance?.accuracy ? Math.round(mlPerformance.accuracy) + '%' : '--'}\n              </Text>\n              <Text style={styles.metricLabel}>ML Accuracy</Text>\n            </View>\n          </View>\n        </View>\n        \n        <View style={styles.headerRight}>\n          <View style={styles.connectionStatus}>\n            <View style={[styles.connectionDot, getFreshnessStyle(freshness.status)]} />\n            <Text style={styles.connectionText}>{freshness.text}</Text>\n          </View>\n          <Text style={styles.timeDisplay}>{formatTime(currentTime)}</Text>\n          <Text style={styles.lastUpdate}>\n            Last Update: {lastDataUpdate ? formatTime(lastDataUpdate) : '--:--'}\n          </Text>\n          {wsConnected && (\n            <View style={styles.syncStatus}>\n              <Ionicons name=\"wifi\" size={12} color=\"#10B981\" />\n              <Text style={styles.syncText}>Supervisor Sync Active</Text>\n            </View>\n          )}\n        </View>\n      </View>\n\n      {/* Custom Messages from Supervisors */}\n      {customMessages.length > 0 && (\n        <View style={styles.customMessages}>\n          {customMessages.map(message => (\n            <View \n              key={message.id} \n              style={[\n                styles.customMessage,\n                { borderLeftColor: message.priority === 'critical' ? '#DC2626' : \n                                  message.priority === 'warning' ? '#F59E0B' : '#3B82F6' }\n              ]}\n            >\n              <View style={styles.messageHeader}>\n                <Ionicons \n                  name={message.priority === 'critical' ? 'warning' : \n                       message.priority === 'warning' ? 'alert-circle' : 'information-circle'} \n                  size={16} \n                  color={message.priority === 'critical' ? '#DC2626' : \n                         message.priority === 'warning' ? '#F59E0B' : '#3B82F6'} \n                />\n                <Text style={styles.messageLabel}>SUPERVISOR MESSAGE</Text>\n                <Text style={styles.messageTime}>\n                  {new Date(message.timestamp).toLocaleTimeString('en-GB')}\n                </Text>\n              </View>\n              <Text style={styles.messageText}>{message.message}</Text>\n            </View>\n          ))}\n        </View>\n      )}\n\n      {/* Live Supervisor Card */}\n      <SupervisorCard \n        supervisors={activeSupervisors || []}\n        connectedCount={connectedSupervisors}\n        onCardPress={(expanded) => {\n          console.log('Display supervisor card', expanded ? 'expanded' : 'collapsed');\n        }}\n      />\n\n      {/* Main Content */}\n      <View style={styles.mainContent}>\n        {/* Alert Display Section */}\n        <View style={styles.alertDisplaySection}>\n          <View style={styles.alertHeader}>\n            <View style={styles.alertTitleContainer}>\n              <Ionicons name=\"alert-circle\" size={24} color=\"#3B82F6\" />\n              <Text style={styles.alertTitle}>Live Traffic Intelligence</Text>\n            </View>\n            <View style={styles.alertCount}>\n              <Text style={styles.alertCountText}>{currentAlerts.length}</Text>\n            </View>\n          </View>\n\n          <View style={styles.currentAlert}>\n            {isLoading ? (\n              <View style={styles.loadingContainer}>\n                <Ionicons name=\"sync\" size={40} color=\"#3B82F6\" />\n                <Text style={styles.loadingText}>Initializing traffic intelligence...</Text>\n              </View>\n            ) : connectionError ? (\n              <View style={styles.errorContainer}>\n                <Ionicons name=\"warning\" size={60} color=\"#EF4444\" />\n                <Text style={styles.errorTitle}>Connection Error</Text>\n                <Text style={styles.errorText}>Unable to connect to traffic data services</Text>\n              </View>\n            ) : currentAlerts.length === 0 ? (\n              <View style={styles.noAlertsContainer}>\n                <Ionicons name=\"shield-checkmark\" size={80} color=\"#10B981\" />\n                <Text style={styles.noAlertsTitle}>All Systems Clear</Text>\n                <Text style={styles.noAlertsText}>No active traffic alerts detected</Text>\n                <Text style={styles.noAlertsSubtext}>Services operating normally across the network</Text>\n              </View>\n            ) : currentAlert ? (\n              <View style={styles.alertCard}>\n                <Text style={styles.alertCounter}>\n                  Alert {alertIndex + 1} of {currentAlerts.length}\n                </Text>\n                \n                <View style={[\n                  styles.severityBadge, \n                  { backgroundColor: currentAlert.severity === 'High' ? '#EF4444' : \n                                    currentAlert.severity === 'Medium' ? '#F59E0B' : '#10B981' }\n                ]}>\n                  <Text style={styles.severityText}>\n                    {(currentAlert.severity || 'UNKNOWN').toUpperCase()} PRIORITY\n                  </Text>\n                </View>\n\n                <Text style={styles.alertCardTitle}>\n                  {currentAlert.title || 'Traffic Alert'}\n                </Text>\n\n                <View style={styles.alertLocation}>\n                  <Ionicons name=\"location\" size={20} color=\"#3B82F6\" />\n                  <Text style={styles.locationText}>\n                    {currentAlert.location || 'Location not specified'}\n                  </Text>\n                </View>\n\n                <Text style={styles.alertDescription}>\n                  {currentAlert.description || 'No additional details available'}\n                </Text>\n\n                {currentAlert.affectsRoutes?.length > 0 && (\n                  <View style={styles.routeImpact}>\n                    <View style={styles.routeImpactHeader}>\n                      <Ionicons name=\"bus\" size={16} color=\"#3B82F6\" />\n                      <Text style={styles.routeTitle}>\n                        Affected Routes ({currentAlert.affectsRoutes.length})\n                      </Text>\n                    </View>\n                    <View style={styles.routeBadges}>\n                      {currentAlert.affectsRoutes.slice(0, 8).map((route, idx) => (\n                        <View key={idx} style={styles.routeBadge}>\n                          <Text style={styles.routeBadgeText}>{route}</Text>\n                        </View>\n                      ))}\n                      {currentAlert.affectsRoutes.length > 8 && (\n                        <Text style={styles.moreRoutesText}>\n                          +{currentAlert.affectsRoutes.length - 8} more\n                        </Text>\n                      )}\n                    </View>\n                  </View>\n                )}\n\n                <View style={styles.alertMetadata}>\n                  <Text style={styles.alertSource}>\n                    Source: {(currentAlert.source || 'SYSTEM').toUpperCase()}\n                  </Text>\n                </View>\n              </View>\n            ) : null}\n          </View>\n        </View>\n\n        {/* Enhanced Map Section */}\n        <View style={styles.mapContainer}>\n          <View style={styles.mapHeader}>\n            <View style={styles.mapTitleContainer}>\n              <Ionicons name=\"map\" size={20} color=\"#3B82F6\" />\n              <Text style={styles.mapTitle}>Live Traffic Map</Text>\n            </View>\n            <View style={styles.mapStats}>\n              <Text style={styles.mapStatsText}>\n                {mapAlertsCount} alerts • North East England\n              </Text>\n            </View>\n          </View>\n          \n          <View style={styles.mapWrapper}>\n            <TrafficMap \n              alerts={currentAlerts}\n              currentAlert={currentAlert}\n              alertIndex={alertIndex}\n            />\n          </View>\n        </View>\n      </View>\n\n      {/* Status Footer */}\n      <View style={styles.footer}>\n        <View style={styles.footerLeft}>\n          <Text style={styles.footerText}>\n            Go North East Control Room • Professional Traffic Intelligence Display\n          </Text>\n          {seriouslyAffectedAreas.length > 0 && (\n            <Text style={styles.affectedAreasText}>\n              Seriously Affected Areas: {\n                seriouslyAffectedAreas.map(area => \n                  `${area.area} (${area.count} alerts)`\n                ).join(' • ')\n              }\n            </Text>\n          )}\n        </View>\n        <View style={styles.footerRight}>\n          <Text style={styles.instructionText}>\n            Real-time supervisor sync • Live traffic intelligence\n          </Text>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F8FAFC',\n    minHeight: '100vh',\n  },\n  \n  // Professional Header\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    backgroundColor: '#FFFFFF',\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E7EB',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  \n  headerLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 16,\n    flex: 1,\n  },\n  \n  logoContainer: {\n    width: 48,\n    height: 48,\n    backgroundColor: '#3B82F6',\n    borderRadius: 12,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  \n  logoText: {\n    fontSize: 24,\n  },\n  \n  titleContainer: {\n    flex: 1,\n  },\n  \n  systemTitle: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: '#1F2937',\n    letterSpacing: 0.5,\n  },\n  \n  displayTitle: {\n    fontSize: 14,\n    color: '#6B7280',\n    fontWeight: '500',\n    marginTop: 2,\n  },\n  \n  headerCenter: {\n    flex: 2,\n    alignItems: 'center',\n  },\n  \n  systemMetrics: {\n    flexDirection: 'row',\n    gap: 32,\n  },\n  \n  metric: {\n    alignItems: 'center',\n    minWidth: 80,\n  },\n  \n  metricValue: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: '#1F2937',\n    marginBottom: 4,\n  },\n  \n  metricLabel: {\n    fontSize: 12,\n    color: '#6B7280',\n    fontWeight: '600',\n    textTransform: 'uppercase',\n    textAlign: 'center',\n  },\n  \n  headerRight: {\n    alignItems: 'flex-end',\n    flex: 1,\n  },\n  \n  connectionStatus: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    marginBottom: 8,\n  },\n  \n  connectionDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n  },\n  \n  connectionText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#374151',\n  },\n  \n  timeDisplay: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: '#1F2937',\n    fontFamily: Platform.OS === 'ios' ? 'Menlo' : 'monospace',\n    marginBottom: 4,\n  },\n  \n  lastUpdate: {\n    fontSize: 12,\n    color: '#6B7280',\n    fontFamily: Platform.OS === 'ios' ? 'Menlo' : 'monospace',\n  },\n  \n  syncStatus: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    marginTop: 4,\n  },\n  \n  syncText: {\n    fontSize: 10,\n    color: '#10B981',\n    fontWeight: '500',\n  },\n  \n  // Custom Messages\n  customMessages: {\n    backgroundColor: '#FFFFFF',\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E7EB',\n  },\n  \n  customMessage: {\n    backgroundColor: '#FFFFFF',\n    borderLeftWidth: 4,\n    marginHorizontal: 16,\n    marginVertical: 8,\n    borderRadius: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  \n  messageHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: '#F8FAFC',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderTopLeftRadius: 8,\n    borderTopRightRadius: 8,\n  },\n  \n  messageLabel: {\n    fontSize: 11,\n    fontWeight: '700',\n    color: '#374151',\n    letterSpacing: 1,\n    flex: 1,\n  },\n  \n  messageTime: {\n    fontSize: 10,\n    color: '#6B7280',\n    fontFamily: Platform.OS === 'ios' ? 'Menlo' : 'monospace',\n  },\n  \n  messageText: {\n    fontSize: 14,\n    color: '#1F2937',\n    padding: 16,\n    lineHeight: 20,\n  },\n  \n  // Main Content\n  mainContent: {\n    flex: 1,\n    flexDirection: 'row',\n    gap: 20,\n    padding: 20,\n  },\n  \n  // Alert Display Section\n  alertDisplaySection: {\n    flex: 2,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n    padding: 24,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  \n  alertHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  \n  alertTitleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n  },\n  \n  alertTitle: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: '#1F2937',\n  },\n  \n  alertCount: {\n    backgroundColor: '#3B82F6',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n  },\n  \n  alertCountText: {\n    color: '#FFFFFF',\n    fontSize: 14,\n    fontWeight: '700',\n  },\n  \n  currentAlert: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  \n  // Loading/Error/No Alerts States\n  loadingContainer: {\n    alignItems: 'center',\n    padding: 60,\n  },\n  \n  loadingText: {\n    color: '#6B7280',\n    fontSize: 16,\n    marginTop: 16,\n  },\n  \n  errorContainer: {\n    alignItems: 'center',\n    padding: 60,\n  },\n  \n  errorTitle: {\n    color: '#EF4444',\n    fontSize: 24,\n    fontWeight: '700',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  \n  errorText: {\n    color: '#EF4444',\n    fontSize: 16,\n    textAlign: 'center',\n  },\n  \n  noAlertsContainer: {\n    alignItems: 'center',\n    padding: 60,\n  },\n  \n  noAlertsTitle: {\n    color: '#10B981',\n    fontSize: 28,\n    fontWeight: '700',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  \n  noAlertsText: {\n    color: '#374151',\n    fontSize: 16,\n    textAlign: 'center',\n    marginBottom: 4,\n  },\n  \n  noAlertsSubtext: {\n    color: '#6B7280',\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  \n  // Alert Card\n  alertCard: {\n    backgroundColor: '#F8FAFC',\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n    borderLeftWidth: 6,\n    borderLeftColor: '#3B82F6',\n    padding: 24,\n  },\n  \n  alertCounter: {\n    color: '#6B7280',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  \n  severityBadge: {\n    alignSelf: 'flex-start',\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n    marginBottom: 16,\n  },\n  \n  severityText: {\n    color: '#FFFFFF',\n    fontSize: 12,\n    fontWeight: '700',\n    letterSpacing: 0.5,\n  },\n  \n  alertCardTitle: {\n    color: '#1F2937',\n    fontSize: 24,\n    fontWeight: '700',\n    marginBottom: 16,\n    lineHeight: 32,\n  },\n  \n  alertLocation: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 16,\n  },\n  \n  locationText: {\n    color: '#3B82F6',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  \n  alertDescription: {\n    color: '#4B5563',\n    fontSize: 14,\n    lineHeight: 20,\n    marginBottom: 16,\n  },\n  \n  // Route Impact\n  routeImpact: {\n    backgroundColor: '#EFF6FF',\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#DBEAFE',\n    padding: 16,\n    marginBottom: 16,\n  },\n  \n  routeImpactHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 12,\n  },\n  \n  routeTitle: {\n    color: '#1E40AF',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  \n  routeBadges: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  \n  routeBadge: {\n    backgroundColor: '#3B82F6',\n    paddingHorizontal: 10,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  \n  routeBadgeText: {\n    color: '#FFFFFF',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  \n  moreRoutesText: {\n    color: '#6B7280',\n    fontSize: 12,\n    alignSelf: 'center',\n  },\n  \n  alertMetadata: {\n    marginTop: 16,\n    paddingTop: 16,\n    borderTopWidth: 1,\n    borderTopColor: '#E5E7EB',\n  },\n  \n  alertSource: {\n    color: '#6B7280',\n    fontSize: 12,\n    fontFamily: Platform.OS === 'ios' ? 'Menlo' : 'monospace',\n  },\n  \n  // Enhanced Map Container\n  mapContainer: {\n    flex: 1.5,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  \n  mapHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  \n  mapTitleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  \n  mapTitle: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: '#1F2937',\n  },\n  \n  mapStats: {\n    backgroundColor: '#EFF6FF',\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#DBEAFE',\n  },\n  \n  mapStatsText: {\n    color: '#1E40AF',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  \n  mapWrapper: {\n    flex: 1,\n    borderRadius: 12,\n    overflow: 'hidden',\n    backgroundColor: '#F3F4F6',\n  },\n  \n  // Footer\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: '#FFFFFF',\n    borderTopWidth: 1,\n    borderTopColor: '#E5E7EB',\n  },\n  \n  footerLeft: {\n    flex: 1,\n  },\n  \n  footerText: {\n    fontSize: 12,\n    color: '#6B7280',\n    fontWeight: '500',\n  },\n  \n  affectedAreasText: {\n    fontSize: 12,\n    color: '#EF4444',\n    fontWeight: '600',\n    marginTop: 4,\n  },\n  \n  footerRight: {\n    alignItems: 'flex-end',\n  },\n  \n  instructionText: {\n    fontSize: 12,\n    color: '#3B82F6',\n    fontWeight: '500',\n  },\n});\n\nexport default ProfessionalDisplayScreen;